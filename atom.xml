<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在北京敲键盘的呼伦贝尔人</title>
  <subtitle>骑马敲代码，我为我自己带盐，有时还撒点儿孜然。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-08T06:46:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>鸿雁</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[原]React-Native Android 学习笔记——2，自定义 logger</title>
    <link href="http://yoursite.com/2016/03/23/%E5%8E%9F-React-Native-Android-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%942%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89-logger/"/>
    <id>http://yoursite.com/2016/03/23/原-React-Native-Android-学习笔记——2，自定义-logger/</id>
    <published>2016-03-23T08:35:48.000Z</published>
    <updated>2016-06-08T06:46:29.000Z</updated>
    
    <content type="html">&lt;p&gt;通过上一篇&lt;a href=&quot;http://blog.csdn.net/kennethyo/article/details/50923909&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《 React-Native Android 学习笔记——1，配置环境》&lt;/a&gt;下载了AwesomeProject项目并运行了 demo。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160322185844293&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;应该和你运行起来的相同，但是除了&lt;code&gt;Welcome to React Native&lt;/code&gt;的颜色。&lt;/p&gt;
&lt;h2 id=&quot;一，index-android-js-文件&quot;&gt;&lt;a href=&quot;#一，index-android-js-文件&quot; class=&quot;headerlink&quot; title=&quot;一，index.android.js 文件&quot;&gt;&lt;/a&gt;一，index.android.js 文件&lt;/h2&gt;&lt;p&gt;demo 默认展示在我们面前的这个页面其实是我们下载&lt;code&gt;AwesomeProject&lt;/code&gt;项目下的&lt;code&gt;index.android.js&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 */&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;hljs-pi&amp;quot;&amp;gt;&amp;apos;use strict&amp;apos;&amp;lt;/span&amp;gt;;
import React, {
  AppRegistry,
  Component,
  StyleSheet,
  Text,
  View,
} from &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;react-native&amp;apos;&amp;lt;/span&amp;gt;;

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; AwesomeProject extends Component {
  render() {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; (
      &amp;lt;span class=&amp;quot;xml&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;View&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.container}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.welcome}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
          Welcome to React Native!
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.instructions}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
          To get started, edit index.android.js
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.instructions}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
          Shake or press menu button for dev menu
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;View&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: &amp;apos;center&amp;apos;,
    alignItems: &amp;apos;center&amp;apos;,
    backgroundColor: &amp;apos;#F5FCFF&amp;apos;,
  },
  welcome: {
    fontSize: 20,
    textAlign: &amp;apos;center&amp;apos;,
    margin: 10,
    color:&amp;apos;red&amp;apos;
  },
  instructions: {
    textAlign: &amp;apos;center&amp;apos;,
    color: &amp;apos;#333333&amp;apos;,
    marginBottom: 5,
  },
});

AppRegistry.registerComponent(&amp;apos;AwesomeProject&amp;apos;, () =&amp;amp;gt; AwesomeProject);
&amp;lt;/span&amp;gt;`&amp;lt;/pre&amp;gt;

可以看到我在 welcome 的 style 中设置了`color:&amp;apos;red&amp;apos;`，让我的`Welcome to React Native`变成红色字体的。如下：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`welcome: {
  fontSize: &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;20&amp;lt;/span&amp;gt;,
  textAlign: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;center&amp;apos;&amp;lt;/span&amp;gt;,
  margin: &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;10&amp;lt;/span&amp;gt;,
  color:&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;red&amp;apos;&amp;lt;/span&amp;gt;
},`&amp;lt;/pre&amp;gt;

下面我们来熟悉一下`index.android.js`这个文件里面的 js 代码都是干什么的。

`&amp;apos;use strict&amp;apos;`是启动当前文件的 js 代码的严格模式，可以使当前的 js 更严格的条件下运行。想了解的可以学习这篇文章[《Javascript 严格模式详解》](http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html)。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`import React, {
  AppRegistry,
  Component,
  StyleSheet,
  Text,
  View,
} from &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;react-native&amp;apos;&amp;lt;/span&amp;gt;;`&amp;lt;/pre&amp;gt;

这段代码类似 java 的 import，把需要引用的 module 引入。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;AwesomeProject&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-inheritance&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Component&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
  render() {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; (
      &amp;amp;lt;View style={styles.&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;container&amp;lt;/span&amp;gt;}&amp;amp;gt;
        &amp;amp;lt;Text style={styles.welcome}&amp;amp;gt;
          Welcome to React Native!
        &amp;amp;lt;/Text&amp;amp;gt;
        &amp;amp;lt;Text style={styles.instructions}&amp;amp;gt;
          To get started, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;edit&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;index&amp;lt;/span&amp;gt;.android.js
        &amp;amp;lt;/Text&amp;amp;gt;
        &amp;amp;lt;Text style={styles.instructions}&amp;amp;gt;
          Shake or press menu button &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; dev menu
        &amp;amp;lt;/Text&amp;amp;gt;
      &amp;amp;lt;/View&amp;amp;gt;
    );
  }
}`&amp;lt;/pre&amp;gt;

这段代码是渲染当前注册界面的布局，`render`方法下的return 就是返回的当前布局。标签内的 style 对应下面这段代码，和 css 很像，等于 Android layout 文件下 view 的标签设置属性。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;const&amp;lt;/span&amp;gt; styles = StyleSheet.create({
  container: {
    flex: &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;,
    justifyContent: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;center&amp;apos;&amp;lt;/span&amp;gt;,
    alignItems: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;center&amp;apos;&amp;lt;/span&amp;gt;,
    backgroundColor: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;#F5FCFF&amp;apos;&amp;lt;/span&amp;gt;,
  },
  welcome: {
    fontSize: &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;20&amp;lt;/span&amp;gt;,
    textAlign: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;center&amp;apos;&amp;lt;/span&amp;gt;,
    margin: &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;10&amp;lt;/span&amp;gt;,
    color:&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;red&amp;apos;&amp;lt;/span&amp;gt;
  },
  instructions: {
    textAlign: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;center&amp;apos;&amp;lt;/span&amp;gt;,
    color: &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;#333333&amp;apos;&amp;lt;/span&amp;gt;,
    marginBottom: &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;5&amp;lt;/span&amp;gt;,
  },
});`&amp;lt;/pre&amp;gt;

标签的具体规范可以看这里[Text](http://facebook.github.io/react-native/docs/text.html#content)，[View](http://facebook.github.io/react-native/docs/view.html#content)。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`AppRegistry.registerComponent(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;AwesomeProject&amp;apos;&amp;lt;/span&amp;gt;, () =&amp;amp;gt; AwesomeProject);`&amp;lt;/pre&amp;gt;

上面这段代码把我们 js 文件中的 class `AwesomeProject`和我们 Android 项目中 `Activity`中`getMainComponentName() { return &amp;quot;AwesomeProject&amp;quot;; }`的 Activity关联起来。

## 二，显示一个 Toast

React-Native 已经把我们常用的模块都已经封装好了，例如 Toast 在`../AwesomeProject/node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js`中。

我们来看 ToastAndroid 的源码：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ToastAndroid
 */&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;hljs-pi&amp;quot;&amp;gt;
&amp;apos;use strict&amp;apos;&amp;lt;/span&amp;gt;;

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; RCTToastAndroid = &amp;lt;span class=&amp;quot;hljs-built_in&amp;quot;&amp;gt;require&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;NativeModules&amp;apos;&amp;lt;/span&amp;gt;).ToastAndroid;

&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;/**
 * This exposes the native ToastAndroid module as a JS module. This has a function &amp;apos;show&amp;apos;
 * which takes the following parameters:
 *
 * 1\. String message: A string with the text to toast
 * 2\. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG
 */&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; ToastAndroid = {

  SHORT: RCTToastAndroid.SHORT,
  LONG: RCTToastAndroid.LONG,

  show: &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(
    message: string,
    duration: number
  )&amp;lt;/span&amp;gt;: &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    RCTToastAndroid.show(message, duration);
  },

};

module.exports = ToastAndroid;
`&amp;lt;/pre&amp;gt;

我们可以直接在引包当中加入ToastAndroid。如下：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`import React, {
  AppRegistry,
  Component,
  StyleSheet,
  Text,
  ToastAndroid,
  View,
} from &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;react-native&amp;apos;&amp;lt;/span&amp;gt;;`&amp;lt;/pre&amp;gt;

下面我们来用 ToastAndroid 弹出一个 Toast。在引包后加入代码`ToastAndroid.show(&amp;apos;Awesome&amp;apos;, ToastAndroid.SHORT);`，下面来摇摆手机调出开发菜单，点击`Reload JS`。就会弹出Toast。

我们来分析一下`ToastAndroid.android.js`这个 module。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; RCTToastAndroid = &amp;lt;span class=&amp;quot;hljs-built_in&amp;quot;&amp;gt;require&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;NativeModules&amp;apos;&amp;lt;/span&amp;gt;).ToastAndroid;`&amp;lt;/pre&amp;gt;

这里是`require`是加载`NativeModules`模块，并把 `ToastAndroid` 赋值给 `RCTToastAndroid`。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; ToastAndroid = {

  SHORT: RCTToastAndroid.SHORT,
  LONG: RCTToastAndroid.LONG,

  show: &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(
    message: string,
    duration: number
  )&amp;lt;/span&amp;gt;: &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    RCTToastAndroid.show(message, duration);
  },

};`&amp;lt;/pre&amp;gt;

这段代码，创建一个对象赋值给`ToastAndroid`，对象内分别设置了`Toast`的 `SHORT`，`LONG`和`show`方法。

`module.exports = ToastAndroid;`这里把`ToastAndroid`作为当前这个 Module 导出，提供给外部使用。

那么 JS 是如何 Android 代码关联起来的呢？下面我们来看一下Native 的代码。在 Android Studio 中搜索类 `ToastModule`，代码如下：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;ToastModule&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;ReactContextBaseJavaModule&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String DURATION_SHORT_KEY = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;SHORT&amp;quot;&amp;lt;/span&amp;gt;;
  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String DURATION_LONG_KEY = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;LONG&amp;quot;&amp;lt;/span&amp;gt;;

  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;ToastModule&amp;lt;/span&amp;gt;(ReactApplicationContext reactContext) {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;(reactContext);
  }

  &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; String &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getName&amp;lt;/span&amp;gt;() {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;ToastAndroid&amp;quot;&amp;lt;/span&amp;gt;;
  }

  &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; Map&amp;amp;lt;String, Object&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getConstants&amp;lt;/span&amp;gt;() {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; Map&amp;amp;lt;String, Object&amp;amp;gt; constants = MapBuilder.newHashMap();
    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);
    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; constants;
  }

  &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@ReactMethod&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;show&amp;lt;/span&amp;gt;(String message, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; duration) {
    Toast.makeText(getReactApplicationContext(), message, duration).show();
  }
}`&amp;lt;/pre&amp;gt;

这里`getName()`方法的返回值对应 JS 中的`var RCTToastAndroid = require(&amp;apos;NativeModules&amp;apos;).ToastAndroid;`结尾处的`ToastAndroid`，正如 js 里的请求手机本地的 modules ，对应到类里的`getName()`返回值。

`getConstants()`方法负责把类中的常量映射到 JS 中去。

`show(String message, int duration)`方法正是我们要提供给 JS 的方法，方法的注释代表这个方法提供给 JS 调用。

## 三，自定义 Logger

这里我们来自定义一个 LoggerModule 来练练手。这里我先把代码贴出来了。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;LoggerModule&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;ReactContextBaseJavaModule&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String MODULE_NAME = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Logger&amp;quot;&amp;lt;/span&amp;gt;;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String TAG_KEY = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;TAG&amp;quot;&amp;lt;/span&amp;gt;;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String TAG_VALUE = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;LoggerModule&amp;quot;&amp;lt;/span&amp;gt;;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;LoggerModule&amp;lt;/span&amp;gt;(ReactApplicationContext reactContext) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;(reactContext);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Nullable&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; Map&amp;amp;lt;String, Object&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getConstants&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; Map&amp;amp;lt;String, Object&amp;amp;gt; constants = MapBuilder.newHashMap();
        constants.put(TAG_KEY, TAG_VALUE);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; constants;
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; String &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getName&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; MODULE_NAME;
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@ReactMethod&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;i&amp;lt;/span&amp;gt;(String tag, String msg) {
        Log.i(tag, msg);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@ReactMethod&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;d&amp;lt;/span&amp;gt;(String tag, String msg) {
        Log.d(tag, msg);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@ReactMethod&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;w&amp;lt;/span&amp;gt;(String tag, String msg) {
        Log.w(tag, msg);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@ReactMethod&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;e&amp;lt;/span&amp;gt;(String tag, String msg) {
        Log.e(tag, msg);
    }
}`&amp;lt;/pre&amp;gt;

这里我把常量`TAG`返回给 JS 调用，Module 命名为`Logger`，并且把 info，debug，warn，error 等 Log 方法加上`@ReactMethod`注释，提供给 JS调用。

这里还没有结束，我们还需要实现一个类，去注册我们自己写的 `LoggerModule`。具体代码如下：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;AppReactPackage&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;implements&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;ReactPackage&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; List&amp;amp;lt;NativeModule&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;createNativeModules&amp;lt;/span&amp;gt;(ReactApplicationContext reactContext) {
        List&amp;amp;lt;NativeModule&amp;amp;gt; modules = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ArrayList&amp;amp;lt;&amp;amp;gt;();
        modules.add(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; LoggerModule(reactContext));
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; modules;
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; List&amp;amp;lt;Class&amp;amp;lt;? extends JavaScriptModule&amp;amp;gt;&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;createJSModules&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; Collections.emptyList();
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; List&amp;amp;lt;ViewManager&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;createViewManagers&amp;lt;/span&amp;gt;(ReactApplicationContext reactContext) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; Collections.emptyList();
    }
}`&amp;lt;/pre&amp;gt;

然后，把这个 AppReactPackage 注册到 Activity。如下：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;ReactActivity&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-javadoc&amp;quot;&amp;gt;/**
     * Returns the name of the main component registered from JavaScript.
     * This is used to schedule rendering of the component.
     */&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; String &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getMainComponentName&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;AwesomeProject&amp;quot;&amp;lt;/span&amp;gt;;
    }

    &amp;lt;span class=&amp;quot;hljs-javadoc&amp;quot;&amp;gt;/**
     * Returns whether dev mode should be enabled.
     * This enables e.g. the dev menu.
     */&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getUseDeveloperSupport&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; BuildConfig.DEBUG;
    }

    &amp;lt;span class=&amp;quot;hljs-javadoc&amp;quot;&amp;gt;/**
     * A list of packages used by the app. If the app uses additional views
     * or modules besides the default ones, add more packages here.
     */&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; List&amp;amp;lt;ReactPackage&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getPackages&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; Arrays.&amp;amp;lt;ReactPackage&amp;amp;gt;asList(
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; MainReactPackage(),
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; AppReactPackage()
        );
    }
}`&amp;lt;/pre&amp;gt;

java 代码到这里就结束了。

下面，我们在`index.android.js`的同级目录创建一个 js 文件`log.js`。里面内容：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-pi&amp;quot;&amp;gt;&amp;apos;use strict&amp;apos;&amp;lt;/span&amp;gt;;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; RCTLogger = &amp;lt;span class=&amp;quot;hljs-built_in&amp;quot;&amp;gt;require&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;NativeModules&amp;apos;&amp;lt;/span&amp;gt;).Logger;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//加载本地 modules，Module#getName()&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; LogAndroid = {
  &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//添加定义的常量 Module#getConstants()&amp;lt;/span&amp;gt;
  TAG: RCTLogger.TAG,
  &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//添加的方法 Module#d()&amp;lt;/span&amp;gt;
  d: &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(tag: string,msg: string)&amp;lt;/span&amp;gt;:&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;
    RCTLogger.d(tag,msg);
  },

  i: &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(tag: string,msg: string)&amp;lt;/span&amp;gt;:&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;
    RCTLogger.i(tag,msg);
  },

  w: &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(tag: string,msg: string)&amp;lt;/span&amp;gt;:&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;
    RCTLogger.w(tag,msg);
  },

  e: &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;function&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(tag: string,msg: string)&amp;lt;/span&amp;gt;:&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;{&amp;lt;/span&amp;gt;
    RCTLogger.e(tag,msg);
  }
}

module.exports = LogAndroid;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//module 导出&amp;lt;/span&amp;gt;`&amp;lt;/pre&amp;gt;

这里不用多说了，无非就是创建一个 LogAndroid 对象获取 `LoggerModule`java 类中的常量，方法等，并且导出。

下面我贴出完整的`index.android.js`，里面显示如何引用：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 */&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;hljs-pi&amp;quot;&amp;gt;&amp;apos;use strict&amp;apos;&amp;lt;/span&amp;gt;;
import React, {
  AppRegistry,
  Component,
  StyleSheet,
  Text,
  ToastAndroid,
  View,
} from &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;react-native&amp;apos;&amp;lt;/span&amp;gt;;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;var&amp;lt;/span&amp;gt; LogAndroid = &amp;lt;span class=&amp;quot;hljs-built_in&amp;quot;&amp;gt;require&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;./log&amp;apos;&amp;lt;/span&amp;gt;);

LogAndroid.i(LogAndroid.TAG,&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Awesome&amp;quot;&amp;lt;/span&amp;gt;);
LogAndroid.d(LogAndroid.TAG,&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Awesome&amp;quot;&amp;lt;/span&amp;gt;);
LogAndroid.w(LogAndroid.TAG,&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Awesome&amp;quot;&amp;lt;/span&amp;gt;);
LogAndroid.e(LogAndroid.TAG,&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Awesome&amp;quot;&amp;lt;/span&amp;gt;);

ToastAndroid.show(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;apos;Awesome&amp;apos;&amp;lt;/span&amp;gt;, ToastAndroid.SHORT);

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; AwesomeProject extends Component {
  render() {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; (
      &amp;lt;span class=&amp;quot;xml&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;View&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.container}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.welcome}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
          Welcome to React Native!
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.instructions}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
          To get started, edit index.android.js
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;style&amp;lt;/span&amp;gt;=&amp;lt;span class=&amp;quot;hljs-value&amp;quot;&amp;gt;{styles.instructions}&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
          Shake or press menu button for dev menu
        &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Text&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;span class=&amp;quot;hljs-tag&amp;quot;&amp;gt;&amp;amp;lt;/&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;View&amp;lt;/span&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt;
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: &amp;apos;center&amp;apos;,
    alignItems: &amp;apos;center&amp;apos;,
    backgroundColor: &amp;apos;#F5FCFF&amp;apos;,
  },
  welcome: {
    fontSize: 20,
    textAlign: &amp;apos;center&amp;apos;,
    margin: 10,
    color:&amp;apos;red&amp;apos;
  },
  instructions: {
    textAlign: &amp;apos;center&amp;apos;,
    color: &amp;apos;#333333&amp;apos;,
    marginBottom: 5,
  },
});

AppRegistry.registerComponent(&amp;apos;AwesomeProject&amp;apos;, () =&amp;amp;gt; AwesomeProject);&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新编译并运行你的 app，看看 logcat 打印出了日志吗？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2016/3/23 16:35:48 [原文链接](http://blog.csdn.net/kennethyo/article/details/50964432)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：50 评论：1 [查看评论](http://blog.csdn.net/kennethyo/article/details/50964432#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;通过上一篇&lt;a href=&quot;http://blog.csdn.net/kennethyo/article/details/50923909&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《 React-Native Android 学习笔记——1，配置环境
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>[原]React-Native Android 学习笔记——1，配置环境</title>
    <link href="http://yoursite.com/2016/03/18/%E5%8E%9F-React-Native-Android-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941%EF%BC%8C%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2016/03/18/原-React-Native-Android-学习笔记——1，配置环境/</id>
    <published>2016-03-18T07:30:43.000Z</published>
    <updated>2016-06-08T06:46:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一，设备与环境&quot;&gt;&lt;a href=&quot;#一，设备与环境&quot; class=&quot;headerlink&quot; title=&quot;一，设备与环境&quot;&gt;&lt;/a&gt;一，设备与环境&lt;/h2&gt;&lt;h3 id=&quot;1，一台-mac&quot;&gt;&lt;a href=&quot;#1，一台-mac&quot; class=&quot;headerlink&quot; title=&quot;1，一台 mac&quot;&gt;&lt;/a&gt;1，一台 mac&lt;/h3&gt;&lt;h3 id=&quot;2，安装软件包管理器-Homebrew-中文&quot;&gt;&lt;a href=&quot;#2，安装软件包管理器-Homebrew-中文&quot; class=&quot;headerlink&quot; title=&quot;2，安装软件包管理器 Homebrew(中文)&quot;&gt;&lt;/a&gt;2，安装软件包管理器 &lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew(中文)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;终端里输入&lt;code&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&quot;3，安装-wget-或者-curl&quot;&gt;&lt;a href=&quot;#3，安装-wget-或者-curl&quot; class=&quot;headerlink&quot; title=&quot;3，安装 wget 或者 curl&quot;&gt;&lt;/a&gt;3，安装 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Wget&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wget&lt;/a&gt; 或者 &lt;a href=&quot;https://zh.wikipedia.org/wiki/CURL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;curl&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;wget，终端里输入&lt;code&gt;brew install wget&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;p&gt;curl，终端里输入&lt;code&gt;brew install curl&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;h3 id=&quot;4，安装-nvm-node版本管理器&quot;&gt;&lt;a href=&quot;#4，安装-nvm-node版本管理器&quot; class=&quot;headerlink&quot; title=&quot;4，安装 nvm (node版本管理器)&quot;&gt;&lt;/a&gt;4，安装 &lt;a href=&quot;https://github.com/creationix/nvm#installation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nvm&lt;/a&gt; (node版本管理器)&lt;/h3&gt;&lt;p&gt;如果安装了 wget，终端输入&lt;code&gt;wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash&lt;/code&gt;进行安装 nvm。&lt;/p&gt;
&lt;p&gt;如果安装了 curl，终端输入&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bashÂ&lt;/code&gt;进行安装 nvm。&lt;/p&gt;
&lt;h3 id=&quot;5，Android-SDK&quot;&gt;&lt;a href=&quot;#5，Android-SDK&quot; class=&quot;headerlink&quot; title=&quot;5，Android SDK&quot;&gt;&lt;/a&gt;5，Android SDK&lt;/h3&gt;&lt;p&gt;这个不用多说了，相信大家都会的。顺便把 Android SDK 配置到环境变量。&lt;/p&gt;
&lt;p&gt;如果你没有 Android SDK，也可以通过终端输入&lt;code&gt;brew install android-sdk&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;二，安装和初始react-native-demo&quot;&gt;&lt;a href=&quot;#二，安装和初始react-native-demo&quot; class=&quot;headerlink&quot; title=&quot;二，安装和初始react-native demo&quot;&gt;&lt;/a&gt;二，安装和初始react-native demo&lt;/h2&gt;&lt;p&gt;终端输入&lt;code&gt;npm install -g react-native-cli&lt;/code&gt;安装 react-native。&lt;/p&gt;
&lt;p&gt;如果显示&lt;code&gt;EACCES: permission denied&lt;/code&gt;，用超级权限再次执行一下上面的指令。反正我是没遇到。&lt;/p&gt;
&lt;p&gt;进入到你要创建 demo 的目录，终端输入&lt;code&gt;cd 你得文件路径&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;终端输入&lt;code&gt;react-native init AwesomeProject&lt;/code&gt;，初始 AwesomeProject 。&lt;/p&gt;
&lt;p&gt;终端输入&lt;code&gt;cd AwesomeProject&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;终端输入&lt;code&gt;react-native run-android&lt;/code&gt;可以直接运行 node 服务并编译运行 Android 项目，直至安装到手机。&lt;/p&gt;
&lt;p&gt;如果界面报错提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unable &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; download JS bundle
com.facebook.react.devsupport.DebugServerException: Could &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;not&amp;lt;/span&amp;gt; connect &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; development server.

URL: http://localhost:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;8081&amp;lt;/span&amp;gt;/index.android.bundle?platform=android&amp;amp;amp;dev=true&amp;amp;amp;hot=false

Try the following &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; fix the issue:
• Ensure that the packager server &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;is&amp;lt;/span&amp;gt; running
• Ensure that your device/emulator &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;is&amp;lt;/span&amp;gt; connected &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; your machine &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt; has USB debugging enabled - run &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;&amp;apos;adb&amp;lt;/span&amp;gt; devices&amp;apos; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; see a list &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt; connected devices
• &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;If&amp;lt;/span&amp;gt; you&amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;&amp;apos;re&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt; a physical device connected &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; the same machine, run &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;&amp;apos;adb&amp;lt;/span&amp;gt; reverse tcp:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;8081&amp;lt;/span&amp;gt; tcp:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;8081&amp;lt;/span&amp;gt;&amp;apos; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; forward requests from your device
• &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;If&amp;lt;/span&amp;gt; your device &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;is&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt; the same Wi-Fi network, set &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;&amp;apos;Debug&amp;lt;/span&amp;gt; server host &amp;amp;amp; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;port&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; device&amp;apos; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;in&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;&amp;apos;Dev&amp;lt;/span&amp;gt; settings&amp;apos; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;to&amp;lt;/span&amp;gt; your machine&amp;lt;span class=&amp;quot;hljs-attribute&amp;quot;&amp;gt;&amp;apos;s&amp;lt;/span&amp;gt; IP address &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;and&amp;lt;/span&amp;gt; the &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;port&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt; the local dev server - e.g. &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;10.0&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;.1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;.1&amp;lt;/span&amp;gt;:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;8081&amp;lt;/span&amp;gt;
at com.facebook.react.devsupport.DevServerHelper$&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1.&amp;lt;/span&amp;gt;onFailure(DevServerHelper.java:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;203&amp;lt;/span&amp;gt;)
at com.squareup.okhttp.Call$AsyncCall.execute(Call.java:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;175&amp;lt;/span&amp;gt;)
at com.squareup.okhttp.internal.NamedRunnable.run(NamedRunnable.java:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;33&amp;lt;/span&amp;gt;)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1113&amp;lt;/span&amp;gt;)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;588&amp;lt;/span&amp;gt;)
at java.lang.Thread.run(Thread.java:&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;818&amp;lt;/span&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般在终端输入&lt;code&gt;adb reverse tcp:8081 tcp:8081&lt;/code&gt;即可解决，其他请详细看 log。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2016/3/18 15:30:43 [原文链接](http://blog.csdn.net/kennethyo/article/details/50923909)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：118 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/50923909#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一，设备与环境&quot;&gt;&lt;a href=&quot;#一，设备与环境&quot; class=&quot;headerlink&quot; title=&quot;一，设备与环境&quot;&gt;&lt;/a&gt;一，设备与环境&lt;/h2&gt;&lt;h3 id=&quot;1，一台-mac&quot;&gt;&lt;a href=&quot;#1，一台-mac&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>[原]Android 自定义字体，字替换为图片</title>
    <link href="http://yoursite.com/2015/12/03/%E5%8E%9F-Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%EF%BC%8C%E5%AD%97%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2015/12/03/原-Android-自定义字体，字替换为图片/</id>
    <published>2015-12-03T05:54:59.000Z</published>
    <updated>2016-06-08T06:45:59.000Z</updated>
    
    <content type="html">&lt;p&gt;不久前开发的版本中有这样一个需求，根据服务器返回的分数，显示分数，各位可能觉得这有什么呢？那么请看下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151203113652497&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151203113712189&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151203113725790&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151203113742294&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;没错，这就是我们的需求。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;思路一，&quot;&gt;&lt;a href=&quot;#思路一，&quot; class=&quot;headerlink&quot; title=&quot;思路一，&quot;&gt;&lt;/a&gt;思路一，&lt;/h4&gt;&lt;p&gt;添加字体库，通过设置 TextView，在初始化的时候设置我们的字体。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TextView textView = (TextView) findViewById(R.id.custom);
&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 将字体文件保存在assets/fonts/目录下&amp;lt;/span&amp;gt;
Typeface typeFace =  Typeface.createFromAsset(getAssets(),&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;fonts/your_font_name.ttf&amp;quot;&amp;lt;/span&amp;gt;);
&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 应用字体&amp;lt;/span&amp;gt;
textView.setTypeface(typeFace);`&amp;lt;/pre&amp;gt;

#### 思路二，

通过 自定义 View，根据分数算出每个字的位置，通过canvas 画出。通过如下方法：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`canvas.drawBitmap(&amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@NonNull&amp;lt;/span&amp;gt; Bitmap bitmap, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; left, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; top, &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Nullable&amp;lt;/span&amp;gt; Paint paint) `&amp;lt;/pre&amp;gt;

* * *

#### 解决方案：

按照上面的思路，我直接去找设计妹子，说能给我做成字体库吗？然后我就被抓成土豆丝了。回来我自己了解了一下做字体库，通过了解，为这几个字（0，1，2，3，4，5，6，7，8，9，分，@#%作为一个字），做字体库显然成本比较大。

思路一不行，就思路二吧。思路麻烦在于，要分别处理，两个字（0分），三个字（60分），四个字（100分）和@#%，四种情况。

分清了几种状态，就可以开始着手开发了，就在这时，这时，我想到，这个，这个，不就和年初看的 emoji 表情是一个意思吗，只不过换成我自己的表情而已。

年初看的 emoji 表情，是 [github 上的一个项目](https://github.com/rockerhieu/emojicon)，其主要原理是，通过判断字符来替换相应的字符码为 emoji 图片。

这是自定义的 TextView

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FaceRateTextView&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;TextView&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FaceRateTextView&amp;lt;/span&amp;gt;(Context context) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;(context);
        init();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FaceRateTextView&amp;lt;/span&amp;gt;(Context context, AttributeSet attrs) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;(context, attrs);
        init();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FaceRateTextView&amp;lt;/span&amp;gt;(Context context, AttributeSet attrs, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; defStyleAttr) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;(context, attrs, defStyleAttr);
        init();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;init&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (!TextUtils.isEmpty(getText())) {
            setText(getText());
        }
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;setText&amp;lt;/span&amp;gt;(CharSequence text, BufferType type) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (!TextUtils.isEmpty(text)) {
            SpannableStringBuilder builder = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; SpannableStringBuilder(text);
            FontsHandler.addFonts(getContext(), builder, (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;) getTextSize(), (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;) getTextSize());
            text = builder;
        }
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.setText(text, type);
    }
}`&amp;lt;/pre&amp;gt;

FontsHandler，是通过正则判断字符串当中有没有要替换的字符，并且替换为 DynamicDrawableSpan。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FontsHandler&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; Map&amp;amp;lt;String, Integer&amp;amp;gt; mFonts = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; HashMap&amp;amp;lt;&amp;amp;gt;(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;12&amp;lt;/span&amp;gt;);

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; {
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;分&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;0&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_0);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;1&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_1);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;2&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_2);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;3&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_3);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;4&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_4);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;5&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_5);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;6&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_6);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;7&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_7);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;8&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_8);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;9&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_9);
        mFonts.put(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;balala&amp;quot;&amp;lt;/span&amp;gt;, R.drawable.ic_face_rate_balala);
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;addFonts&amp;lt;/span&amp;gt;(Context context, Spannable spannable, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; size, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; textSize) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; hasChanges = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;false&amp;lt;/span&amp;gt;;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (Map.Entry&amp;amp;lt;String, Integer&amp;amp;gt; entry : mFonts.entrySet()) {
            String key = entry.getKey();
            Matcher matcher = Pattern.compile(Pattern.quote(key)).matcher(spannable);
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;while&amp;lt;/span&amp;gt; (matcher.find()) {
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; set = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (FontsSpan span : spannable.getSpans(matcher.start(),
                        matcher.end(), FontsSpan.class))
                    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (spannable.getSpanStart(span) &amp;amp;gt;= matcher.start()
                            &amp;amp;amp;&amp;amp;amp; spannable.getSpanEnd(span) &amp;amp;lt;= matcher.end())
                        spannable.removeSpan(span);
                    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; {
                        set = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;false&amp;lt;/span&amp;gt;;
                        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;break&amp;lt;/span&amp;gt;;
                    }
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (set) {
                    hasChanges = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;
                    spannable.setSpan(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; FontsSpan(context, entry.getValue(), size, textSize),
                            matcher.start(), matcher.end(),
                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                }
            }
        }
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; hasChanges;
    }
}`&amp;lt;/pre&amp;gt;

FontsSpan 继承于DynamicDrawableSpan，主要实现替换字符为 drawable。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FontsSpan&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;DynamicDrawableSpan&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; Context mContext;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mResourceId;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mSize;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mTextSize;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mHeight;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mWidth;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mTop;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; Drawable mDrawable;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; WeakReference&amp;amp;lt;Drawable&amp;amp;gt; mDrawableRef;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;FontsSpan&amp;lt;/span&amp;gt;(Context context, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; resourceId, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; size, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; textSize) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;(DynamicDrawableSpan.ALIGN_BASELINE);
        mContext = context;
        mResourceId = resourceId;
        mWidth = mHeight = mSize = size;
        mTextSize = textSize;
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; Drawable &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getDrawable&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (mDrawable == &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;) {
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;try&amp;lt;/span&amp;gt; {
                mDrawable = mContext.getResources().getDrawable(mResourceId);
                mHeight = mSize;
                mWidth = mHeight * mDrawable.getIntrinsicWidth() / mDrawable.getIntrinsicHeight();
                mTop = (mTextSize - mHeight) / &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;;
                mDrawable.setBounds(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;, mTop, mWidth, mTop + mHeight);
            } &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;catch&amp;lt;/span&amp;gt; (Exception e) {
                &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// swallow&amp;lt;/span&amp;gt;
            }
        }
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; mDrawable;
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;draw&amp;lt;/span&amp;gt;(Canvas canvas, CharSequence text, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; start, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; end, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; x, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; top, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; y, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; bottom, Paint paint) {
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//super.draw(canvas, text, start, end, x, top, y, bottom, paint);&amp;lt;/span&amp;gt;
        Drawable b = getCachedDrawable();
        canvas.save();

        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; transY = bottom - b.getBounds().bottom;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (mVerticalAlignment == ALIGN_BASELINE) {
            transY = top + ((bottom - top) / &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;) - ((b.getBounds().bottom - b.getBounds().top) / &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;) - mTop;
        }

        canvas.translate(x, transY);
        b.draw(canvas);
        canvas.restore();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; Drawable &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getCachedDrawable&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (mDrawableRef == &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt; || mDrawableRef.get() == &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;) {
            mDrawableRef = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; WeakReference&amp;amp;lt;Drawable&amp;amp;gt;(getDrawable());
        }
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; mDrawableRef.get();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实原理很简单，并不复杂。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KennethYo/ScanNeedleDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo代码地址&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/12/3 13:54:59 [原文链接](http://blog.csdn.net/kennethyo/article/details/50158497)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：138 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/50158497#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;不久前开发的版本中有这样一个需求，根据服务器返回的分数，显示分数，各位可能觉得这有什么呢？那么请看下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151203113652497&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>[原]Android 翻转动画 Rotate3dAnimation 效果</title>
    <link href="http://yoursite.com/2015/10/16/%E5%8E%9F-Android-%E7%BF%BB%E8%BD%AC%E5%8A%A8%E7%94%BB-Rotate3dAnimation-%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2015/10/16/原-Android-翻转动画-Rotate3dAnimation-效果/</id>
    <published>2015-10-16T09:05:57.000Z</published>
    <updated>2016-06-08T06:45:49.000Z</updated>
    
    <content type="html">&lt;p&gt;十一前请了一天假，后面请了三天假，串起来一共休息了十二天，这期间见了女朋友的家长，也领女朋友见了我家长，好消息是各方家长反馈不错，坏消息是涨了五斤肉，毕竟是吃了12天的呼伦贝儿牛羊肉哈。玩了这么多天，回来要收收心好好工作了，毕竟要攒钱娶媳妇哈~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上班回来，按照产品的需求做了这样一个效果，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20151016162517318&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这其中包含了3个动画，分别是移动动画、放大动画、旋转动画。&lt;/p&gt;
&lt;p&gt;前两个动画比较好完成，可以用 TranslateAnimation 和 ScaleAnimation来完成，但是第三个就比较麻烦了，因为这个旋转动画是根据 Y 轴来旋转的，而 RotateAnimation 是根据垂直屏幕的 Z 轴旋转的，所以 RotateAnimation 并不能够完成我们需要的效果，这里就需要我们去继承 Animation 去自定义动画了。&lt;/p&gt;
&lt;p&gt;但是！！！&lt;/p&gt;
&lt;p&gt;但是 APIdemo 里面已经实现了这个动画，so，我们拿来用就好了，下面是我贴出来的Rotate3dAnimation，其中我添加了一个构造，添加了相对自己位置的 type。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;package&amp;lt;/span&amp;gt; cn.kenneth.rotate3danimation;

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; android.graphics.Camera;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; android.graphics.Matrix;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; android.view.animation.Animation;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; android.view.animation.Transformation;

&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Rotate3dAnimation&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Animation&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mCenterXType = ABSOLUTE;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; mCenterYType = ABSOLUTE;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; mFromDegrees;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; mToDegrees;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; mCenterX;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; mCenterY;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; mDepthZ;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; mReverse;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; Camera mCamera;

    &amp;lt;span class=&amp;quot;hljs-javadoc&amp;quot;&amp;gt;/**
     * Creates a new 3D rotation on the Y axis. The rotation is defined by its
     * start angle and its end angle. Both angles are in degrees. The rotation
     * is performed around a center point on the 2D space, definied by a pair
     * of X and Y coordinates, called centerX and centerY. When the animation
     * starts, a translation on the Z axis (depth) is performed. The length
     * of the translation can be specified, as well as whether the translation
     * should be reversed in time.
     *
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @param&amp;lt;/span&amp;gt; fromDegrees the start angle of the 3D rotation
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @param&amp;lt;/span&amp;gt; toDegrees   the end angle of the 3D rotation
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @param&amp;lt;/span&amp;gt; centerX     the X center of the 3D rotation
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @param&amp;lt;/span&amp;gt; centerY     the Y center of the 3D rotation
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @param&amp;lt;/span&amp;gt; reverse     true if the translation should be reversed, false otherwise
     */&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Rotate3dAnimation&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; fromDegrees, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; toDegrees,
                             &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; centerX, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; centerY, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; depthZ, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; reverse) {
        mFromDegrees = fromDegrees;
        mToDegrees = toDegrees;
        mCenterX = centerX;
        mCenterY = centerY;
        mDepthZ = depthZ;
        mReverse = reverse;
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Rotate3dAnimation&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; fromDegrees, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; toDegrees,
                             &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; centerXType, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; centerX, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; centerYType, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; centerY, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; depthZ, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; reverse) {
        mFromDegrees = fromDegrees;
        mToDegrees = toDegrees;
        mCenterXType = centerXType;
        mCenterX = centerX;
        mCenterYType = centerYType;
        mCenterY = centerY;
        mDepthZ = depthZ;
        mReverse = reverse;
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;initialize&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; width, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; height, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; parentWidth, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; parentHeight) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.initialize(width, height, parentWidth, parentHeight);
        mCamera = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Camera();
        mCenterX = resolveSize(mCenterXType, mCenterX, width, parentWidth);
        mCenterY = resolveSize(mCenterYType, mCenterY, height, parentHeight);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;applyTransformation&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; interpolatedTime, Transformation t) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; fromDegrees = mFromDegrees;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);

        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; centerX = mCenterX;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;float&amp;lt;/span&amp;gt; centerY = mCenterY;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; Camera camera = mCamera;

        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; Matrix matrix = t.getMatrix();

        camera.save();
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (mReverse) {
            camera.translate(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0.0&amp;lt;/span&amp;gt;f, &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0.0&amp;lt;/span&amp;gt;f, mDepthZ * interpolatedTime);
        } &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; {
            camera.translate(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0.0&amp;lt;/span&amp;gt;f, &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0.0&amp;lt;/span&amp;gt;f, mDepthZ * (&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1.0&amp;lt;/span&amp;gt;f - interpolatedTime));
        }
        camera.rotateY(degrees);
        camera.getMatrix(matrix);
        camera.restore();

        matrix.preTranslate(-centerX, -centerY);
        matrix.postTranslate(centerX, centerY);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;移动动画也比较好做，点击的时候记录点击 icon 在 window 上的位置，然后传到下一个界面，计算一下偏移量。&lt;/p&gt;
&lt;p&gt;这里面要注意，里面的 weibo 等 icon，我用的并不是图片，用的是FontAwesome，具体用法看下面博客：&lt;/p&gt;
&lt;p&gt;中文地址：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NDAxNTY4MA==&amp;amp;mid=208795106&amp;amp;idx=1&amp;amp;sn=7745289b193dc8ff20ba81ff9bb23b21&amp;amp;scene=1&amp;amp;srcid=1016s8Satc5ZO0gDrVLqVIBM&amp;amp;key=b410d3164f5f798e7ec8a5a17847eeddc1247303cf5fe40ac8a564295602dd6161bb83fa346de7cd9878b60274b20e77&amp;amp;ascene=0&amp;amp;uin=MTAxNzk0OTM1&amp;amp;devicetype=iMac+MacBookPro11%2C1+OSX+OSX+10.11+build%2815A284%29&amp;amp;version=11020201&amp;amp;pass_ticket=WHgV251%2BEh%2Bkh7UMBqQp034b8MGYzxeoJ7l9Ncwz3iE%3D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目网站：&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;demo 代码地址：&lt;a href=&quot;https://github.com/KennethYo/Rotate3dAnimation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/10/16 17:05:57 [原文链接](http://blog.csdn.net/kennethyo/article/details/49181037)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：171 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/49181037#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;十一前请了一天假，后面请了三天假，串起来一共休息了十二天，这期间见了女朋友的家长，也领女朋友见了我家长，好消息是各方家长反馈不错，坏消息是涨了五斤肉，毕竟是吃了12天的呼伦贝儿牛羊肉哈。玩了这么多天，回来要收收心好好工作了，毕竟要攒钱娶媳妇哈~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上班
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Animation" scheme="http://yoursite.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>[原]Android 可拖拽 GridView 并且实时切换和拖动到下部删除</title>
    <link href="http://yoursite.com/2015/09/29/%E5%8E%9F-Android-%E5%8F%AF%E6%8B%96%E6%8B%BD-GridView-%E5%B9%B6%E4%B8%94%E5%AE%9E%E6%97%B6%E5%88%87%E6%8D%A2%E5%92%8C%E6%8B%96%E5%8A%A8%E5%88%B0%E4%B8%8B%E9%83%A8%E5%88%A0%E9%99%A4/"/>
    <id>http://yoursite.com/2015/09/29/原-Android-可拖拽-GridView-并且实时切换和拖动到下部删除/</id>
    <published>2015-09-29T07:22:08.000Z</published>
    <updated>2016-06-08T06:45:52.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在公司做了一个这样的需求，拖动GridView 中的 item 到指定区域删除，具体效果，请看下面的动图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150929150020321&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;拖动效果是通过隐藏 GridView中被选中的 item，并且同时在 Window 上注册一个 View 来实现，具体逻辑和代码，请参照这篇博客&lt;a href=&quot;http://blog.csdn.net/xiaanming/article/details/17718579&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/xiaanming/article/details/17718579&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我的需求当中，多了一个拖动到底部区域缩小并且删除。&lt;/p&gt;
&lt;p&gt;考虑到从 GridView 中拖动一个 item 到另一个 View 中，并且删除，只在 GridView 当中进行绘制被拖动的 item 肯定是达不到进入另一个 view 的效果，即使做起来也是相当麻烦的。&lt;/p&gt;
&lt;p&gt;我们可以在 GridView 和删除区域的上一层 View 当中进行绘制，但是看到&lt;a href=&quot;http://blog.csdn.net/xiaanming/article/details/17718579&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拖动效果博客&lt;/a&gt;当中是直接注册在了 Window 上，这更加减少了工作量，直接在 GridView 当中判断如果用户拖动的坐标y 轴大于了 GridView 的高度，就可以进行缩小动画了。&lt;/p&gt;
&lt;p&gt;但是这里要注意的是，注册在 window 上的 View 不能直接在其最外层的  Layout 上进行动画，所以我对ImageView 进行了包裹，并且是对 ImageView 进行动画。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mDragImageView = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ImageView(getContext());
mDragImageView.setImageBitmap(bitmap);
mDragImageView.setBackgroundResource(R.drawable.bg_shadow);

mDragLayout = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; FrameLayout(getContext());
mDragLayout.addView(mDragImageView);

mWindowManager.addView(mDragLayout, mWindowLayoutParams);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了拖动效果实现的代码，其他都很简单，具体请参照代码，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KennethYo/DragViewAndDelete&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码地址&lt;/a&gt;，其中里面的一些自定义标签都是我需求中自定义的，可以自行修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/9/29 15:22:08 [原文链接](http://blog.csdn.net/kennethyo/article/details/48807167)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：276 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/48807167#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在公司做了一个这样的需求，拖动GridView 中的 item 到指定区域删除，具体效果，请看下面的动图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150929150020321&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>[原]高仿SinaWeibo新浪微博发布页面话题效果</title>
    <link href="http://yoursite.com/2015/08/10/%E5%8E%9F-%E9%AB%98%E4%BB%BFSinaWeibo%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%8F%91%E5%B8%83%E9%A1%B5%E9%9D%A2%E8%AF%9D%E9%A2%98%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2015/08/10/原-高仿SinaWeibo新浪微博发布页面话题效果/</id>
    <published>2015-08-09T16:06:33.000Z</published>
    <updated>2016-06-08T06:45:33.000Z</updated>
    
    <content type="html">&lt;p&gt;最近做了一个仿新浪微博话题效果的功能,网上搜索了几个效果,都存在一定问题,最终借鉴别人的思路,完成这一套效果.&lt;/p&gt;
&lt;p&gt;首先,我们拆分逻辑以及开发顺序.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;1-实现话题变色效果&quot;&gt;&lt;a href=&quot;#1-实现话题变色效果&quot; class=&quot;headerlink&quot; title=&quot;1,实现话题变色效果&quot;&gt;&lt;/a&gt;1,实现话题变色效果&lt;/h6&gt;&lt;h6 id=&quot;2-实现插入话题效果&quot;&gt;&lt;a href=&quot;#2-实现插入话题效果&quot; class=&quot;headerlink&quot; title=&quot;2,实现插入话题效果&quot;&gt;&lt;/a&gt;2,实现插入话题效果&lt;/h6&gt;&lt;h6 id=&quot;3-实现话题选中删除效果&quot;&gt;&lt;a href=&quot;#3-实现话题选中删除效果&quot; class=&quot;headerlink&quot; title=&quot;3,实现话题选中删除效果&quot;&gt;&lt;/a&gt;3,实现话题选中删除效果&lt;/h6&gt;&lt;h6 id=&quot;4-实现点击话题-光标在话题之后&quot;&gt;&lt;a href=&quot;#4-实现点击话题-光标在话题之后&quot; class=&quot;headerlink&quot; title=&quot;4,实现点击话题,光标在话题之后&quot;&gt;&lt;/a&gt;4,实现点击话题,光标在话题之后&lt;/h6&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150809173121271&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面我们就一步一步实现效果.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一-实现话题变色&quot;&gt;&lt;a href=&quot;#一-实现话题变色&quot; class=&quot;headerlink&quot; title=&quot;一,实现话题变色&quot;&gt;&lt;/a&gt;一,实现话题变色&lt;/h2&gt;&lt;p&gt;实现逻辑主要是通过&lt;code&gt;EditText&lt;/code&gt;的&lt;code&gt;addTextChangedListener()&lt;/code&gt;来进行监听文本变动,通过正则表达式来匹配出文本中的话题.&lt;/p&gt;
&lt;h5 id=&quot;利用正则表达式获取全部话题&quot;&gt;&lt;a href=&quot;#利用正则表达式获取全部话题&quot; class=&quot;headerlink&quot; title=&quot;利用正则表达式获取全部话题:&quot;&gt;&lt;/a&gt;利用正则表达式获取全部话题:&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//正则表达式,一定要和服务器以及 iOS 端统一&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String topicRegex = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;#([^#]+?)#&amp;quot;&amp;lt;/span&amp;gt;;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; ArrayList&amp;amp;lt;String&amp;amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;findTopic&amp;lt;/span&amp;gt;(String s) {

        Pattern p = Pattern.compile(topicRegex);
        Matcher m = p.matcher(s);

        ArrayList&amp;amp;lt;String&amp;amp;gt; list = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ArrayList&amp;amp;lt;&amp;amp;gt;();
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;while&amp;lt;/span&amp;gt; (m.find()) {
            list.add(m.group());
        }

        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; list;
}`&amp;lt;/pre&amp;gt;

##### 通过正则表达式匹配出的话题集合,遍历出每个话题的 startIndex 位置(后来发现`Matcher`方法是有获取 index 的方法),并且通过`EditText.getText()`方法获取的`Editable`直接对文本进行操作:

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onTextChanged&amp;lt;/span&amp;gt;(CharSequence s, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; start, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; before, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; count) {
        Log.i(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;MainActivity&amp;quot;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;onTextChanged&amp;quot;&amp;lt;/span&amp;gt;);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (TextUtils.isEmpty(s)) &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt;;
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//1,查找话题&amp;lt;/span&amp;gt;
        String content = s.toString();
        mTopicList.clear();
        mTopicList.addAll(findTopic(s.toString()));

        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//2,为查找出的变色&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//首先要为editable,去除之前设置的colorSpan&amp;lt;/span&amp;gt;
        Editable editable = mEditText.getText();
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; i = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;; i &amp;amp;lt; mColorSpans.size(); i++) {
            editable.removeSpan(mColorSpans.get(i));
        }
        mColorSpans.clear();
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//为editable,中的话题加入colorSpan&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; findPos = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; size = mTopicList.size();
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; i = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;; i &amp;amp;lt; size; i++) {&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//便利话题&amp;lt;/span&amp;gt;
            String topic = mTopicList.get(i);
            findPos = content.indexOf(topic, findPos);
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (findPos != -&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;) {
                ForegroundColorSpan colorSpan = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ForegroundColorSpan(Color.BLUE);
                editable.setSpan(colorSpan, findPos, findPos = findPos + topic.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                mColorSpans.add(colorSpan);
            }
        }
}`&amp;lt;/pre&amp;gt;

* * *

## 二,实现插入话题效果

新浪微博的插入话题效果,是开启一个新的页面,点击一个话题后,插入光标所在的位置.这里我用一个按钮模仿了这个动作.要注意的是,要记录插入之前光标的位置,并且在插入话题后,把光标放置在话题之后:

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (v.getId() == R.id.button) {
            &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//插入话题&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; selectionStart = mEditText.getSelectionStart();
            &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//下面这些操作也可以直接替换为操作 EditText 的Editable实现,下面的代码 review 后看起来由点蠢,直接调用 insert 方法比较巧妙&amp;lt;/span&amp;gt;
            String content = mEditText.getText().toString();

            String firstStr = content.substring(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;, selectionStart);
            String secondStr = content.substring(selectionStart, content.length());

            String insertTopic = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;#这是一个插入的话题#&amp;quot;&amp;lt;/span&amp;gt;;
            mEditText.setText(firstStr + insertTopic + secondStr);
            mEditText.setSelection(selectionStart + insertTopic.length());
}`&amp;lt;/pre&amp;gt;

## 三,实现话题选中删除效果

这里也是要时时判断光标所在的位置,当光标出现在话题之后,再次点击删除,就截获为选中话题效果,实现起来也是很简单的.

但是要注意的是,我们不能利用 activity 里面的`onKeyDown()`和`onKeyUp()`两个回调,通过 log 发现文本变动和按键点击的回调顺序为`beforeTextChanged-&amp;amp;gt;onTextChanged-&amp;amp;gt;afterTextChanged-&amp;amp;gt;onKeyDown-&amp;amp;gt;onKeyUp`.

这也说明了如果通过 拦截`onKeyDown()`和`onKeyUp()`两个回调时,文本是已经删除之后的文本,并能有效的达到我们要实现的目的,那么有没有是文本改变之前就能截取到按键的方法呢?

其实我们可以通过监听`EditText`的`setOnKeyListener()`方法来监听按键(`onKey-&amp;amp;gt;beforeTextChanged-&amp;amp;gt;onTextChanged-&amp;amp;gt;afterTextChanged-&amp;amp;gt;onKeyDown-&amp;amp;gt;onKeyUp`):

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onKey&amp;lt;/span&amp;gt;(View v, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; keyCode, KeyEvent event) {
        Log.i(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;MainActivity&amp;quot;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;onKey&amp;quot;&amp;lt;/span&amp;gt;);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (keyCode == KeyEvent.KEYCODE_DEL &amp;amp;amp;&amp;amp;amp; event.getAction() == KeyEvent.ACTION_DOWN &amp;amp;amp;&amp;amp;amp; mCheckBox2.isChecked()) {

            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; selectionStart = mEditText.getSelectionStart();
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; selectionEnd = mEditText.getSelectionEnd();
            &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//如果光标起始和结束在同一位置,说明是选中效果,直接返回 false 交给系统执行删除动作&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (selectionStart != selectionEnd) {
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;false&amp;lt;/span&amp;gt;;
            }

            Editable editable = mEditText.getText();
            String content = editable.toString();
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; lastPos = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;;
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; size = mTopicList.size();
            &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//遍历判断光标的位置&amp;lt;/span&amp;gt;
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; i = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;; i &amp;amp;lt; size; i++) {
                String topic = mTopicList.get(i);
                lastPos = content.indexOf(topic, lastPos);
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (lastPos != -&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;) {
                    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (selectionStart != &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt; &amp;amp;amp;&amp;amp;amp; selectionStart &amp;amp;gt;= lastPos &amp;amp;amp;&amp;amp;amp; selectionStart &amp;amp;lt;= (lastPos + topic.length())) {
                        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//选中话题&amp;lt;/span&amp;gt;
                        mEditText.setSelection(lastPos, lastPos + topic.length());
                        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;
                    }
                }
                lastPos += topic.length();
            }
        }
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;false&amp;lt;/span&amp;gt;;
    }
`&amp;lt;/pre&amp;gt;

## 四,实现点击话题,光标在话题之后

逻辑处理就是监听`EditText`的点击事件,处理光标所在位置,如果在位置在话题内,立即放置在话题的后面,逻辑比较简单,直接上代码:

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (v.getId() == R.id.editText &amp;amp;amp;&amp;amp;amp; mCheckBox1.isChecked()) {
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; selectionStart = mEditText.getSelectionStart();

            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; lastPos = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;;
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; size = mTopicList.size();
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; i = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;; i &amp;amp;lt; size; i++) {
                String topic = mTopicList.get(i);
                lastPos = mEditText.getText().toString().indexOf(topic, lastPos);

                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (lastPos != -&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;) {
                    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (selectionStart &amp;amp;gt;= lastPos &amp;amp;amp;&amp;amp;amp; selectionStart &amp;amp;lt;= (lastPos + topic.length())) {
                        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//在这position 区间就移动光标&amp;lt;/span&amp;gt;
                        mEditText.setSelection(lastPos + topic.length());
                    }
                }
                lastPos = lastPos + topic.length();
            }
        }
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;最终还是有点小遗憾没有完成.当拷贝一段已经变色的话题,再粘贴到文本后,无法删除掉拷贝进来文本的变色效果,尝试调用&lt;code&gt;Editable.clearSpans()&lt;/code&gt;去除全部 span 也无法实现,并且这个方法会导致直接卡死.后来直接使用&lt;code&gt;EditText.setText()&lt;/code&gt;控制文本,确实达到了效果,但是当输入法是类似 mx4默认输入法效果时(效果大概是,输入的拼音直接显示在 EditText 里面,点击被选汉字,替换掉拼音),会把输入的拼音放入到文本里,所以上面的代码,我一般是直接操作 Editable.&lt;/p&gt;
&lt;p&gt;如果有更好的方法或者修复了上面的小遗憾,请留言指教.&lt;/p&gt;
&lt;p&gt;Demo 地址：&lt;a href=&quot;https://github.com/KennethYo/SinaTopic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/KennethYo/SinaTopic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转载请注明出处:&lt;a href=&quot;http://www.kennethyo.me/post/android/2015-08-09&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kennethyo.me/post/android/2015-08-09&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/8/10 0:06:33 [原文链接](http://blog.csdn.net/kennethyo/article/details/47377353)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：1077 评论：1 [查看评论](http://blog.csdn.net/kennethyo/article/details/47377353#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个仿新浪微博话题效果的功能,网上搜索了几个效果,都存在一定问题,最终借鉴别人的思路,完成这一套效果.&lt;/p&gt;
&lt;p&gt;首先,我们拆分逻辑以及开发顺序.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;1-实现话题变色效果&quot;&gt;&lt;a href=&quot;#1-实现话题变色效果
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[译]介绍MVP Model-View-Presenter在Android中的应用</title>
    <link href="http://yoursite.com/2015/05/25/%E8%AF%91-%E4%BB%8B%E7%BB%8DMVP-Model-View-Presenter%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2015/05/25/译-介绍MVP-Model-View-Presenter在Android中的应用/</id>
    <published>2015-05-25T05:47:35.000Z</published>
    <updated>2016-06-08T06:44:39.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是我学习MVP模式时翻译的，原文是&lt;a href=&quot;http://konmik.github.io/author/konstantin-mikheev.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Konstantin Mikheev&lt;/a&gt;所写，&lt;a href=&quot;http://konmik.github.io/introduction-to-model-view-presenter-on-android.html?utm_source=Android+Weekly&amp;amp;utm_campaign=5589504b56-Android_Weekly_148&amp;amp;utm_medium=email&amp;amp;utm_term=0_4eb677ad19-5589504b56-337835113&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因英语水平有限，翻译的很生硬，基本靠Google，请见谅。以下是译文。&lt;/p&gt;
&lt;p&gt;转载请注明出处:&lt;a href=&quot;http://blog.csdn.net/kennethyo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/kennethyo&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这篇文章我会通过一个最简单的例子去一步步介绍MVP模式在Android中的最佳实践。同时我也会介绍一个使MVP模式在Android开发中变简单的library。&lt;/p&gt;
&lt;h1 id=&quot;简单？怎么才能从中获益呢？&quot;&gt;&lt;a href=&quot;#简单？怎么才能从中获益呢？&quot; class=&quot;headerlink&quot; title=&quot;简单？怎么才能从中获益呢？&quot;&gt;&lt;/a&gt;简单？怎么才能从中获益呢？&lt;/h1&gt;&lt;h2 id=&quot;什么是MVP&quot;&gt;&lt;a href=&quot;#什么是MVP&quot; class=&quot;headerlink&quot; title=&quot;什么是MVP&quot;&gt;&lt;/a&gt;什么是MVP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;层是用来显示数据和相应数据操作的。在Android中，它可能是Activity，Fragment，View或者Dialog。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt;层是数据访问层，例如数据库API或者远程服务器访问API。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Presenter&lt;/strong&gt;层提供View层和Model层的数据进行联系。Presenter层也可以控制后台Task。&lt;/p&gt;
&lt;p&gt;在Android中，MVP模式可以把后台线程从Activitys/Views/Fragments中脱离出来，使它们在大部分生命周期事件中更加独立。这样的应用变得更加简单，整个程序的稳定性提升了10倍不止，应用代码变得更加少，代码可维护性变得更加友善，开发者的生命变得更加开心。&lt;/p&gt;
&lt;h2 id=&quot;在Android中，为什么是MVP&quot;&gt;&lt;a href=&quot;#在Android中，为什么是MVP&quot; class=&quot;headerlink&quot; title=&quot;在Android中，为什么是MVP&quot;&gt;&lt;/a&gt;在Android中，为什么是MVP&lt;/h2&gt;&lt;h3 id=&quot;原因1：保持简单傻瓜&quot;&gt;&lt;a href=&quot;#原因1：保持简单傻瓜&quot; class=&quot;headerlink&quot; title=&quot;原因1：保持简单傻瓜&quot;&gt;&lt;/a&gt;原因1：保持简单傻瓜&lt;/h3&gt;&lt;p&gt;如果你还没读过这篇文章，请读一遍：&lt;a href=&quot;https://people.apache.org/~fhanik/kiss.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Kiss Principle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大多数Android程序仅仅使用了View-Model模式。&lt;/p&gt;
&lt;p&gt;程序员需要参与View的复杂性，而不是解决业务。&lt;/p&gt;
&lt;p&gt;在应用中你仅仅使用Model-View，最后会落得“一切连接这一切”的状态。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![这里写图片描述](http://img.blog.csdn.net/20150525132155795)

如果这个示例图看起来不是那么复杂，那么想想每个View可能随时消失和随时出现。别忘了保存和恢复view的状态。为临时View attache 几个后台任务，蛋糕准备好了！

另一种“一切连接着一切”就是上帝对象。

![这里写图片描述](http://img.blog.csdn.net/20150525132227292)

上地对象太过于复杂；代码块不能被重复利用，测试或方便的debug和重构。

#### 使用MVP模式

![这里写图片描述](http://img.blog.csdn.net/20150525132427577)

&amp;lt;pre&amp;gt;`·复杂的任务被分解成简单的任务，并且容易解决。
·更小的对象，更少的bug，更简单debug。
·可测试。
`&amp;lt;/pre&amp;gt;

### 原因2：后台任务

无论何时，你写Activity，Fragment或者自定义View，你可以把所有方法与后台任务的外部或者静态类联系起来。这样，你的后台任务将不会和一个Activity联系，不会造成内存泄露和不用Activity来消费。我叫这样的对象为“Presenter”。

有那么几种处理后台线程的方法，但都是不可靠的，不过MVP是可靠的。

#### 为什么MVP可以

通过这个视图，显示了不同的应用控件，在发生configuration发生改变或者内存溢出的时候发生了什么。每一个Android开发者都应该知道这个视图，然而这样一个视图并不是每个开发都知道。

![这里写图片描述](http://img.blog.csdn.net/20150525133414325)

**Case 1:**当用户旋转屏幕，改变语言设置， attache 一个外部显示器，等情况，通常Configuration会发生变化。更多关于[Configuration]

([http://developer.android.com/reference/android/R.attr.html#configChanges](http://developer.android.com/reference/android/R.attr.html#configChanges))请阅读链接。

**Case 2:**当用户在开发者设置里面选择了“Don’t keep activities”或者其他Activity到最顶层，Activity会发生restart。

**Case 3:**没有足够的内存和应用进入后台，process会restart。

**最后**

现在你可以看到，Fragment当中设置setRetainInstance(true)在这里是没用帮助的，我们只需要设置save/restore就可以。因此，我们可以简单的去除Fragment的setRetainInstance方法，来限制问题的数量。

![这里写图片描述](http://img.blog.csdn.net/20150525133504401)

|Activity, View, Fragment, DialogFragment Static variables and threads | save/restore no change | save/restore reset |

现在看起来爽多了。我们在应用任何情况下，只需要写两段代码就可以完成restore：

&amp;lt;pre&amp;gt;`·Activity，View，Fragment，DialogFragment的save/restore。
·线程restart，restart后台请求。
`&amp;lt;/pre&amp;gt;

第一部分，是Android API提供的方法。第二部分是Presenter层的工作。Presenter只要记住那些请求需要被执行，如果一个进程执行期间restart，Presenter将会重新执行它们。

## 一个例子

这个例子将加载服务器上得数据来显示一些items。如果出现错误将显示一个toast。

我推荐使用[RxJava](https://github.com/ReactiveX/RxJava)来构建Presenter，因为这个Library控制数据流很简单。

我也要感谢创建[The Internet Chuck Norris Database](http://www.icndb.com/)的人，我把它用在了我例子当中。

## 没用MVP的[例子00](https://github.com/konmik/MVPExamples/tree/master/example00)：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Activity&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String DEFAULT_NAME = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Chuck Norris&amp;quot;&amp;lt;/span&amp;gt;;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; ArrayAdapter&amp;amp;lt;ServerAPI.Item&amp;amp;gt; adapter;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; Subscription subscription;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onCreate&amp;lt;/span&amp;gt;(Bundle savedInstanceState) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ListView listView = (ListView)findViewById(R.id.listView);
        listView.setAdapter(adapter = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ArrayAdapter&amp;amp;lt;&amp;amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, R.layout.item));
        requestItems(DEFAULT_NAME);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onDestroy&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onDestroy();
        unsubscribe();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;requestItems&amp;lt;/span&amp;gt;(String name) {
        unsubscribe();
        subscription = App.getServerAPI()
            .getItems(name.split(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;\\s+&amp;quot;&amp;lt;/span&amp;gt;)[&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;], name.split(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;\\s+&amp;quot;&amp;lt;/span&amp;gt;)[&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;])
            .delay(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;, TimeUnit.SECONDS)
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Action1&amp;amp;lt;ServerAPI.Response&amp;amp;gt;() {
                &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;(ServerAPI.Response response) {
                    onItemsNext(response.items);
                }
            }, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Action1&amp;amp;lt;Throwable&amp;amp;gt;() {
                &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;(Throwable error) {
                    onItemsError(error);
                }
            });
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onItemsNext&amp;lt;/span&amp;gt;(ServerAPI.Item[] items) {
        adapter.clear();
        adapter.addAll(items);
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onItemsError&amp;lt;/span&amp;gt;(Throwable throwable) {
        Toast.makeText(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, throwable.getMessage(), Toast.LENGTH_LONG).show();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;unsubscribe&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (subscription != &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;) {
            subscription.unsubscribe();
            subscription = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;;
        }
    }
}
`&amp;lt;/pre&amp;gt;

一个有经验的开发会发现这个例子是有一些缺陷的：

&amp;lt;pre&amp;gt;`·每次翻转屏幕都会重新请求一次——每次翻转屏幕用户都会看一会儿空白界面。
·如果用户经常翻转屏幕，就会导致内存泄露——每个回调都会保持对MainActivity的引用，并且request运行的时候会把MainActivity保持在内存中。这绝对有可能导致因为内存溢出而应用crash，或者应用运行明显缓慢。
`&amp;lt;/pre&amp;gt;

## 使用MVP的[例子01](https://github.com/konmik/MVPExamples/tree/master/example01)

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainPresenter&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String DEFAULT_NAME = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Chuck Norris&amp;quot;&amp;lt;/span&amp;gt;;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; ServerAPI.Item[] items;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; Throwable error;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; MainActivity view;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainPresenter&amp;lt;/span&amp;gt;() {
        App.getServerAPI()
            .getItems(DEFAULT_NAME.split(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;\\s+&amp;quot;&amp;lt;/span&amp;gt;)[&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;], DEFAULT_NAME.split(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;\\s+&amp;quot;&amp;lt;/span&amp;gt;)[&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;])
            .delay(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;, TimeUnit.SECONDS)
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Action1&amp;amp;lt;ServerAPI.Response&amp;amp;gt;() {
                &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;(ServerAPI.Response response) {
                    items = response.items;
                    publish();&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//onNext&amp;lt;/span&amp;gt;
                }
            }, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Action1&amp;amp;lt;Throwable&amp;amp;gt;() {
                &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;(Throwable throwable) {
                    error = throwable;
                    publish();&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;//onError&amp;lt;/span&amp;gt;
                }
            });
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onTakeView&amp;lt;/span&amp;gt;(MainActivity view) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;.view = view;
        publish();
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;publish&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (view != &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;) {
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (items != &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;)
                view.onItemsNext(items);
            &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (error != &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;)
                view.onItemsError(error);
        }
    }
}`&amp;lt;/pre&amp;gt;

从技术角度讲：MainPresenter有三个线程事件：onNext，onError，onTakeview。通过`publish()`方法，onNext或者onError事件会发布到MainActivity实例。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;Activity&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; ArrayAdapter&amp;amp;lt;ServerAPI.Item&amp;amp;gt; adapter;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; MainPresenter presenter;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onCreate&amp;lt;/span&amp;gt;(Bundle savedInstanceState) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ListView listView = (ListView)findViewById(R.id.listView);
        listView.setAdapter(adapter = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ArrayAdapter&amp;amp;lt;&amp;amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, R.layout.item));

        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (presenter == &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;)
            presenter = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; MainPresenter();
        presenter.onTakeView(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;);
    }

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onDestroy&amp;lt;/span&amp;gt;() {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onDestroy();
        presenter.onTakeView(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (isFinishing())
            presenter = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;;
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onItemsNext&amp;lt;/span&amp;gt;(ServerAPI.Item[] items) {
        adapter.clear();
        adapter.addAll(items);
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onItemsError&amp;lt;/span&amp;gt;(Throwable throwable) {
        Toast.makeText(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, throwable.getMessage(), Toast.LENGTH_LONG).show();
    }
}`&amp;lt;/pre&amp;gt;

MainActivity 创建 MainPresenter，并且保持MainPresenter在onCreate和onDestory周期之外。MainActivity用一个静态变量引用MainPresenter，当由于OOM导致线程重启，MainActivity会检查MainPresenter是否还存在，如果不存在就去创建它。

是的，检查和使用静态变量起来有那么点臃肿，但是稍后我会给大家看如何写的更加优雅。：）

主要思想：

&amp;lt;pre&amp;gt;`·例子应用不会在每次用户翻转屏幕的时候重新请求。
·如果线程被重启，再次加载数据。
·当MainActivity被销毁后，MainPresenter不会保持应用
`&amp;lt;/pre&amp;gt;

MainActivity实例，这样当旋转屏幕的时候就不会内存泄露，而且也没有取消请求。

## Nucleus

Nuleus 是我创建的一个library，灵感来自于[Mortar](https://github.com/square/mortar)library和[Keep It Stupid Simple](https://people.apache.org/~fhanik/kiss.html)这篇文章。

下面是功能列表：

&amp;lt;pre&amp;gt;`·支持在View/Fragment/Activity状态Bundle中save/restore Presenter的状态。Presenter能够存储请求参数到重新启动。

·提供一个工具，通过一行代码可以把请求结果和错误放到正确的view当中去，因此无需再写`！=null`来检查。

·一个Presenter可以被多个view实例引用。如果Presenter实例使用[Dagger]，就不能被多个view引用。

·通过一行代码就可以把Presenter和view进行绑定。

·提供view的基类：NucleusView, NucleusFragment, NucleusSupportFragment, NucleusActivity。你也可以从他们当中copy代码到任何类当中来利用Nucleus的Presenters。

·Presenter在线程重启之后能够自动restart。在`onDestroy`自动取消注册RxJava。

·最后，要保持简单明了，让每一个开发者都能够看懂。这里通过大约180行代码来驱动Presenter，230行RxJava代码来支持。
`&amp;lt;/pre&amp;gt;

## 使用[Nuleus](https://github.com/konmik/nucleus)的[例子02](https://github.com/konmik/MVPExamples/tree/master/example02)

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainPresenter&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;RxPresenter&amp;lt;/span&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt;&amp;amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; String DEFAULT_NAME = &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;Chuck Norris&amp;quot;&amp;lt;/span&amp;gt;;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onCreate&amp;lt;/span&amp;gt;(Bundle savedState) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onCreate(savedState);

        App.getServerAPI()
            .getItems(DEFAULT_NAME.split(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;\\s+&amp;quot;&amp;lt;/span&amp;gt;)[&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;], DEFAULT_NAME.split(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;\\s+&amp;quot;&amp;lt;/span&amp;gt;)[&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;])
            .delay(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;, TimeUnit.SECONDS)
            .observeOn(AndroidSchedulers.mainThread())
            .compose(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;.&amp;amp;lt;ServerAPI.Response&amp;amp;gt;deliverLatestCache())
            .subscribe(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Action1&amp;amp;lt;ServerAPI.Response&amp;amp;gt;() {
                &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;(ServerAPI.Response response) {
                    getView().onItemsNext(response.items);
                }
            }, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Action1&amp;amp;lt;Throwable&amp;amp;gt;() {
                &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
                &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;call&amp;lt;/span&amp;gt;(Throwable throwable) {
                    getView().onItemsError(throwable);
                }
            });
    }
}

&amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@RequiresPresenter&amp;lt;/span&amp;gt;(MainPresenter.class)
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;NucleusActivity&amp;lt;/span&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainPresenter&amp;lt;/span&amp;gt;&amp;amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; ArrayAdapter&amp;amp;lt;ServerAPI.Item&amp;amp;gt; adapter;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onCreate&amp;lt;/span&amp;gt;(Bundle savedInstanceState) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ListView listView = (ListView)findViewById(R.id.listView);
        listView.setAdapter(adapter = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; ArrayAdapter&amp;amp;lt;&amp;amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, R.layout.item));
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onItemsNext&amp;lt;/span&amp;gt;(ServerAPI.Item[] items) {
        adapter.clear();
        adapter.addAll(items);
    }

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onItemsError&amp;lt;/span&amp;gt;(Throwable throwable) {
        Toast.makeText(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, throwable.getMessage(), Toast.LENGTH_LONG).show();
    }
}`&amp;lt;/pre&amp;gt;

正如你看到的，这个例子明显比前一个例子短，并且简洁。Nucleus用来创建，销毁，保存Presenter， attache 或 detached一个view到Presenter，并且把请求结果自动发送到被 attache 的View当中。

`MainPresenter`的代码比较少是因为通过`deliverLatestCache()`操作，期延迟了数据和错误，直到view是可用的，才会把数据和错误送到view里。它把数据缓存到内存中，这样当configuration改变的时候，数据还是可用的。

`MainActivity`的代码比较少是因为Presenter的创建由`NucleusActivity`来管理。所有你需要绑定presenter的类，只需要在类上声明`@RequiresPresenter(MainPresenter.class)`注释。

警告！注释！在Android世界中，如果你使用注释，这是一个很好的做法，这不会降低性能。我已Galaxy S（2010的设备）作为基准测试，处理注释只会花去0.3ms。这种注视只会发生在view中，所以我认为注释是对系统性能没有消耗的。

## 更多例子

这是一个参数持久性的[例子](https://github.com/konmik/nucleus/tree/master/nucleus-example)。[测试列子](https://github.com/konmik/nucleus/tree/master/nucleus-example-with-tests)。

## `deliverLatestCache()`方法

这是RxPresenter的一个方法，它有三种版本：

·`deliver()`延迟onNext，onError和onComplete到view变成可用的才会释放。当你做一次请求的时候可以使用它，例如登录到web service。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/RxPresenter.html#deliver%28%29)

·`deliverLatest()`如果有一个新的onNext可用，将会抛弃老的onNext。如果你有数据需要更新，这将不会积累没有必要的数据。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/RxPresenter.html#deliverLatest%28%29)

·`deliverLastestCache()`和`deliverLatest()`比较相似，它保存最后一次数据在内存中，当另一个view变成可用的（例如：configuration 改变），它将重新发送数据到view。如果你不想save/restore请求结果到你的view中（返回结果比较大或者不方便存储到Bundle中），这个方法将允许你去做出更好的用户体验。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/RxPresenter.html#deliverLatestCache%28%29)

## Presenter的生命周期

Presenter的生命周期与Android的控件相比，明显少一些。

·`void onCreate(Bundle savedState)` - 当Presenter被创建的时候会被调用。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onCreate%28android.os.Bundle%29)

·`void onDestroy()` - 离开view的时候会被调用。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onDestroy%28%29)

·`void onSave(Bundle state)` - 当View的`onSaveInstanceState`被调用时会调用，保持Presenter的状态。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onTakeView%28ViewType%29)

·`void onTakeView(ViewType view)` -在Activity或者Fragment调用`onResume()`，或者在`android.view.View#onAttachedToWindow()`期间。 [Javadoc](http://konmik.github.io/attachenucleus/nucleus/presenter/Presenter.html#onTakeView%28ViewType%29)

·`void onDropView()` - Activity或者Fragment调用`onPause()`，或者在`android.view.View#onDetachedFromWindow()`期间。[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onDropView%28%29)

## View回收和View栈

通常你的view（Fragment和自定义view）在与用户的交互下随机 attache 和 detached。每次view被 detached的时候不去销毁Presenter，这可能是一个好主意。你可以任何时间 detached和 attache view，presenter会比这些动作活的更持久，继续后台的工作。

联想到view的回收，有个问题：fragment无法知道是否因为配置改变或者被弹出栈被 detached。

Nucleus的意见是：销毁presenter只能发生在view的`onDetachedFromWindow()/onDestroy()`并且activity是finish的。所以，如果你销毁view是在正常的activity生命周期，你可发出信号来通知presenter也应该被销毁。这里有两个方法可以用`NucleusLayout.destroyPresenter()`和`NucleusFragment.destroyPresenter()`。

举个例子，下面是我在我的项目里面如何管理Fragment `pop()`操作：

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;` fragment = fragmentManager.findFragmentById(R.id.fragmentStackContainer);
    fragmentManager.popBackStackImmediate();
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (fragment &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;instanceof&amp;lt;/span&amp;gt; NucleusFragment)
        ((NucleusFragment)fragment).destroyPresenter();`&amp;lt;/pre&amp;gt;

你可以对replace Fragment做类似的操作。压栈操作的时候也可以。

每次view从Activity detached的时候，你可以决定去销毁presenter来避免这个问题，但是你也将在view被detach的时候失去后台任务。

因此，view回收这部分，完全取决于你。也许，我会找到更好的解决方案，如果你知道，请告诉我。

# 最佳实践

## 把你的请求参数放在Presenter里

这个规则很简单：主要是为了管理请求。所以view自己不应该掌控和重启请求。从View的角度来看，后台任务，永远不会消失，不需要任何回调也会返回一个结果或错误。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainPresenter&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;RxPresenter&amp;lt;/span&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt;&amp;amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; String name = DEFAULT_NAME;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onCreate&amp;lt;/span&amp;gt;(Bundle savedState) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onCreate(savedState);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (savedState != &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;)
            name = savedState.getString(NAME_KEY);
        ...

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onSave&amp;lt;/span&amp;gt;(@NonNull Bundle state) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onSave(state);
        state.putString(NAME_KEY, name);
    }`&amp;lt;/pre&amp;gt;

我建议使用[Icepick](https://github.com/frankiesardo/icepick)library。无需使用注解，就可以减少代码量，并且简化应用逻辑——这一切都发生在编译过程中。可以配合[ButterKnife](http://jakewharton.github.io/butterknife)使用。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainPresenter&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;RxPresenter&amp;lt;/span&amp;gt;&amp;amp;lt;&amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MainActivity&amp;lt;/span&amp;gt;&amp;amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Icicle&amp;lt;/span&amp;gt; String name = DEFAULT_NAME;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onCreate&amp;lt;/span&amp;gt;(Bundle savedState) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onCreate(savedState);
        Icepick.restoreInstanceState(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, savedState);
        ...

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onSave&amp;lt;/span&amp;gt;(@NonNull Bundle state) {
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;super&amp;lt;/span&amp;gt;.onSave(state);
        Icepick.saveInstanceState(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;, state);
    }`&amp;lt;/pre&amp;gt;

如果你有超过2个的请求参数，这个library会存储它们。你可以创建一个`BasePresenter`，并且把Icepick放在类里，这样所有的子类将会获得`@Icicle`，无需再次实现`onSave`。这也工作在activity，Fragment和view。

## 在onTakeView主线程中，执行一个即时查询[Javadoc](http://konmik.github.io/nucleus/nucleus/presenter/Presenter.html#onTakeView%28ViewType%29)

有时候，你要查询一段小数据，例如从数据库中读取一小段数据。虽然你可以用Nucleus简单的创建一个请求，但是你不必到处使用Nucleus。如果在一个Fragment创建的过程中创建一个后台请求，用户会看到一个空白屏幕一小会儿，尽管这个请求就几毫秒。因此，为了是代码更简短，更友善，使用主线程吧。

## 不要尝试用Presenter控制你的View

这么做不是个好方式——应用的逻辑会变得更复杂，这是不正常的方式。

正常的方式是，控制流应该是从用户，通过View，到Presenter，再到Model。用户是控制应用程序的一个来源。因此我们的控制流应该是从用户开始，而不是从应用的内部的结构。

当控制流是从View到Presenter，然后Presenter到Model，这是一个线性流，这样很好写代码。这样你得到了一个简单的序列，user-&amp;amp;gt;view-&amp;amp;gt;presenter-&amp;amp;gt;model-&amp;amp;gt;data。但是，当控制流是这个样子的：user-&amp;amp;gt;view-&amp;amp;gt;presenter-&amp;amp;gt;view-&amp;amp;gt;presenter-&amp;amp;gt;model-&amp;amp;gt;data，这只是违反了KISS原则。

Fragment？是的，Fragment有时候会违反正常的控制流。他们太复杂了。这里有一篇不错的文章，关于思考Fragment：[Advocating Against Android Fragments](http://corner.squareup.com/2014/10/advocating-against-android-fragments.html)。但是[Flow](https://github.com/square/flow)也没有简化太多。

## MVC

如果你熟悉MVC，别用了。MVC完全不同于MVP，MVC并没有解决开发面临的问题。

什么是MVC？

&amp;lt;pre&amp;gt;`·Model应用内部的逻辑部分。负责数据存储。
·View唯一和MVP共同的部分，应用中呈现到屏幕的部分。
·Controller输入设备，例如键盘，鼠标，操纵杆。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你有一台电脑和一个用键盘简单驱动的游戏的时候，MVC出现有很长一段时间了。没有windows，没有图形交互界面，应用程序接收输入（Controller），维持一些状态（Model），产生输出（View）。控制流是这样的：Controller-&amp;gt;Model-&amp;gt;View。这种模式绝对不能用在Android中。&lt;/p&gt;
&lt;p&gt;有很多混淆的MVC模式。人们相信他们使用的是MVC，实际上他们可能用的是MVP（Web开发）。很多Android开发，认为Controller就是控制View，因此他们尝试抽取View的逻辑代码来减少View的代码，用Controller来控制View。我个人没看到这种方式有任何好处。&lt;/p&gt;
&lt;h2 id=&quot;使用不可变数据结构的复杂关系数据库项目&quot;&gt;&lt;a href=&quot;#使用不可变数据结构的复杂关系数据库项目&quot; class=&quot;headerlink&quot; title=&quot;使用不可变数据结构的复杂关系数据库项目&quot;&gt;&lt;/a&gt;使用不可变数据结构的复杂关系数据库项目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;是一个这样的library，在它的描述中写了一堆好处，我推荐看看它。&lt;a href=&quot;https://github.com/frankiesardo/auto-parcel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoParcel&lt;/a&gt;是AutoValue一个Android项目。使用的主要原因是，不用改变对象，通过AutoParcel转换，而不用关心其影响了应用程序的其他部分。他们都是线程安全的。&lt;/p&gt;
&lt;h1 id=&quot;结尾&quot;&gt;&lt;a href=&quot;#结尾&quot; class=&quot;headerlink&quot; title=&quot;结尾&quot;&gt;&lt;/a&gt;结尾&lt;/h1&gt;&lt;p&gt;尝试MVP，并且分享给你的朋友。：）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/5/25 13:47:35 [原文链接](http://blog.csdn.net/kennethyo/article/details/45968767)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：1469 评论：1 [查看评论](http://blog.csdn.net/kennethyo/article/details/45968767#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是我学习MVP模式时翻译的，原文是&lt;a href=&quot;http://konmik.github.io/author/konstantin-mikheev.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Konstantin Mikheev&lt;/
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>[原]Android获取运营商</title>
    <link href="http://yoursite.com/2015/05/08/%E5%8E%9F-Android%E8%8E%B7%E5%8F%96%E8%BF%90%E8%90%A5%E5%95%86/"/>
    <id>http://yoursite.com/2015/05/08/原-Android获取运营商/</id>
    <published>2015-05-08T08:40:08.000Z</published>
    <updated>2016-06-08T06:46:04.000Z</updated>
    
    <content type="html">&lt;p&gt;今天接到一个新需求，要给服务器上送设备运营商名称，之后我的第一反应是，umeng都无法精确统计运营商，我如何判断上送具体的运营商呢？如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150508163804803&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张图里反映了友盟统计到用户手机的运营商名称，这些名称什么样子的都有。有什么办法精确判断具体是什么运营商呢？比如，只返回“中国移动”，“中国联通”，“中国电信”。&lt;/p&gt;
&lt;p&gt;我这里解决的方案是通过设备的MCC/MNC代码来判断。&lt;/p&gt;
&lt;p&gt;首先，我们要了解MCC/MNC是什么，请看&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%A0%81&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WIKI百科&lt;/a&gt;。通过阅读，我们能够知道，只要对比MCC/MNC编码，就能知道具体是什么运营商了。&lt;/p&gt;
&lt;p&gt;其次，就是具体代码了，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;hljs-javadoc&amp;quot;&amp;gt;/**
     * 返回运营商 需要加入权限 &amp;amp;lt;uses-permission android:name=&amp;quot;android.permission.READ_PHONE_STATE&amp;quot;/&amp;amp;gt; &amp;amp;lt;BR&amp;amp;gt;
     *
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @return&amp;lt;/span&amp;gt; 1,代表中国移动，2，代表中国联通，3，代表中国电信，0，代表未知
     *&amp;lt;span class=&amp;quot;hljs-javadoctag&amp;quot;&amp;gt; @author&amp;lt;/span&amp;gt; youzc@yiche.com
     */&amp;lt;/span&amp;gt;
 &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;getOperators&amp;lt;/span&amp;gt;(Context context) {
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 移动设备网络代码（英语：Mobile Network Code，MNC）是与移动设备国家代码（Mobile Country Code，MCC）（也称为“MCC /&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// MNC”）相结合, 例如46000，前三位是MCC，后两位是MNC 获取手机服务商信息&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; OperatorsName = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;;
        String IMSI =  (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE).getSubscriberId();
        &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// IMSI号前面3位460是国家，紧接着后面2位00 运营商代码&amp;lt;/span&amp;gt;
        System.out.println(IMSI);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46000&amp;quot;&amp;lt;/span&amp;gt;) || IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46002&amp;quot;&amp;lt;/span&amp;gt;) || IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46007&amp;quot;&amp;lt;/span&amp;gt;)) {
            OperatorsName = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;;
        } &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46001&amp;quot;&amp;lt;/span&amp;gt;) || IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46006&amp;quot;&amp;lt;/span&amp;gt;)) {
            OperatorsName = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;;
        } &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46003&amp;quot;&amp;lt;/span&amp;gt;) || IMSI.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;46005&amp;quot;&amp;lt;/span&amp;gt;)) {
            OperatorsName = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;;
        }
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; OperatorsName;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过客户端本地比对MCC/MNC确定运营商这种方式，本身我是不赞同的，我认为把MCC/MNC上送到服务器，由服务器判断这才是最优方案。因为应用打好包分发出去，代码就是死的，未来不可以扩展比对，但是服务器是可以动态的，随时配置比对的MCC/MNC编码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/5/8 16:40:08 [原文链接](http://blog.csdn.net/kennethyo/article/details/45582153)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：814 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/45582153#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;今天接到一个新需求，要给服务器上送设备运营商名称，之后我的第一反应是，umeng都无法精确统计运营商，我如何判断上送具体的运营商呢？如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150508163804803&quot; alt=&quot;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]WebView填坑——小功能篇</title>
    <link href="http://yoursite.com/2015/04/22/%E5%8E%9F-WebView%E5%A1%AB%E5%9D%91%E2%80%94%E2%80%94%E5%B0%8F%E5%8A%9F%E8%83%BD%E7%AF%87/"/>
    <id>http://yoursite.com/2015/04/22/原-WebView填坑——小功能篇/</id>
    <published>2015-04-22T08:31:06.000Z</published>
    <updated>2016-06-08T06:46:36.000Z</updated>
    
    <content type="html">&lt;p&gt;这两天负责修改了几个关于在webview中打开公司移动站的bug。本身不是很难解，网上查查都有，但是也有必要记录下来作为备忘。&lt;/p&gt;
&lt;h3 id=&quot;Webview中上传文件&quot;&gt;&lt;a href=&quot;#Webview中上传文件&quot; class=&quot;headerlink&quot; title=&quot;Webview中上传文件&quot;&gt;&lt;/a&gt;Webview中上传文件&lt;/h3&gt;&lt;p&gt;这里的效果类似在pc端上传文件效果，点击打开一个文件选择器，上传文件图片之类的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;openFileChooser（）&lt;/code&gt;方法的重载是因为在不同系统中调用的方法参数不一样，具体看注释。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValueCallback&amp;amp;lt;Uri&amp;amp;gt; mUploadMessage&lt;/code&gt;作为成员变量的目的是我们要在打开的系统文件选择器&lt;code&gt;finish()&lt;/code&gt;后在&lt;code&gt;onActivityResult()&lt;/code&gt;时调用。&lt;/p&gt;
&lt;p&gt;具体实现代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;initWebView&amp;lt;/span&amp;gt;(){
    webView.setWebChromeClient(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; MyWebChromeClient());
}

 &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; ValueCallback&amp;amp;lt;Uri&amp;amp;gt; mUploadMessage;
&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MyWebChromeClient&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;extends&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;WebChromeClient&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// js上传文件的&amp;amp;lt;input type=&amp;quot;file&amp;quot; /&amp;amp;gt;事件捕获&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// Android &amp;amp;gt; 4.1.1 调用这个方法&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;openFileChooser&amp;lt;/span&amp;gt;(ValueCallback&amp;amp;lt;Uri&amp;amp;gt; uploadMsg, String acceptType, String capture) {
      mUploadMessage = uploadMsg;

      Intent intent = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Intent(Intent.ACTION_GET_CONTENT);
      intent.addCategory(Intent.CATEGORY_OPENABLE);
      intent.setType(TextUtils.isEmpty(acceptType) ? &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;image/*&amp;quot;&amp;lt;/span&amp;gt; : acceptType);

      MobileSiteActivity.&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;this&amp;lt;/span&amp;gt;.startActivityForResult(
          Intent.createChooser(intent, ToolBox.getString(R.string.web_activity_please_chooser)),
          MobileSiteActivity.FILECHOOSER_RESULTCODE);

    }

    &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 3.0 + 调用这个方法&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;openFileChooser&amp;lt;/span&amp;gt;(ValueCallback&amp;amp;lt;Uri&amp;amp;gt; uploadMsg, String acceptType) {
      openFileChooser(uploadMsg, acceptType, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;);
    }

    &amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// Android &amp;amp;lt; 3.0 调用这个方法&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;openFileChooser&amp;lt;/span&amp;gt;(ValueCallback&amp;amp;lt;Uri&amp;amp;gt; uploadMsg) {
      openFileChooser(uploadMsg, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;);
    }
  }
  &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onActivityResult&amp;lt;/span&amp;gt;(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; requestCode, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; resultCode, Intent data) {
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (FILECHOOSER_RESULTCODE == requestCode) {
      &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt; == mUploadMessage) &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt;;
      Uri result = data == &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt; || resultCode != RESULT_OK ? &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt; : data.getData();
      mUploadMessage.onReceiveValue(result);
      mUploadMessage = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt;;
      &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt;;
    }
  }
`&amp;lt;/pre&amp;gt;

### WebView当中网页中的地图为白色，不显示地图

这个问题其实就是你没有打开Javascript支持。打开就好啦~

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`webView.setJavaScriptEnabled(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;);&amp;lt;span class=&amp;quot;hljs-comment&amp;quot;&amp;gt;// 设置支持javascript脚本&amp;lt;/span&amp;gt;`&amp;lt;/pre&amp;gt;

### WebView中跳转系统拨号键盘

举一反三，既然要打开系统拨号键盘，那邮箱，地图也可以支持。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`webView.setWebViewClient(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; WebViewClient() {
      &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;boolean&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;shouldOverrideUrlLoading&amp;lt;/span&amp;gt;(WebView view, String url) {

        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (url.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;mailto:&amp;quot;&amp;lt;/span&amp;gt;) || url.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;geo:&amp;quot;&amp;lt;/span&amp;gt;) || url.startsWith(&amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&amp;quot;tel:&amp;quot;&amp;lt;/span&amp;gt;)) {
          Intent intent = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Intent(Intent.ACTION_VIEW, Uri.parse(url));
          startActivity(intent);
          &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;
        }
        view.loadUrl(url);
        &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;
      }
    });`&amp;lt;/pre&amp;gt;

### WebView中支持下载

这里要给WebView设置一个下载监听，监听会回调给你下载地址，这里可以打开系统浏览器去激活下载，用DownloadManger直接去下载也可以，我选择的是第一种方式，这种方式我认为比较符合用户习惯哈。

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;` webView.setDownloadListener(&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; MyWebViewDownLoadListener());`&amp;lt;/pre&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;`
 &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-class&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;class&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;MyWebViewDownLoadListener&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;implements&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;DownloadListener&amp;lt;/span&amp;gt; {&amp;lt;/span&amp;gt;

    &amp;lt;span class=&amp;quot;hljs-annotation&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;onDownloadStart&amp;lt;/span&amp;gt;(String url, String userAgent, String contentDisposition,
        String mimetype, &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;long&amp;lt;/span&amp;gt; contentLength) {

      &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;null&amp;lt;/span&amp;gt; != url) {
        Uri uri = Uri.parse(url);
        Intent intent = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; Intent(Intent.ACTION_VIEW, uri);
        startActivity(intent);
      }
    }

  }

        &amp;lt;div&amp;gt;
            作者：zh08070005 发表于2015/4/22 16:31:06 [原文链接](http://blog.csdn.net/kennethyo/article/details/45196891)
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
        阅读：521 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/45196891#comments)
        &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;这两天负责修改了几个关于在webview中打开公司移动站的bug。本身不是很难解，网上查查都有，但是也有必要记录下来作为备忘。&lt;/p&gt;
&lt;h3 id=&quot;Webview中上传文件&quot;&gt;&lt;a href=&quot;#Webview中上传文件&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]Android程序猿如何泡设计妹之快速掌握dp和px才可以</title>
    <link href="http://yoursite.com/2015/01/25/%E5%8E%9F-Android%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%A6%82%E4%BD%95%E6%B3%A1%E8%AE%BE%E8%AE%A1%E5%A6%B9%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1dp%E5%92%8Cpx%E6%89%8D%E5%8F%AF%E4%BB%A5/"/>
    <id>http://yoursite.com/2015/01/25/原-Android程序猿如何泡设计妹之快速掌握dp和px才可以/</id>
    <published>2015-01-25T14:44:22.000Z</published>
    <updated>2016-06-08T06:46:08.000Z</updated>
    
    <content type="html">&lt;p&gt;相信很多Android程序猿已经对身边的设计妹垂涎三尺了，那么如何博得设计妹的好感呢，学好这篇文章就可以了。&lt;/p&gt;
&lt;p&gt;程序猿与UI设计妹讨论设计稿和切图的时候，经常会因为dp和px的问题搞的不愉快，这里可以分析出两个原因：&lt;/p&gt;
&lt;p&gt;1，程序猿原因，不懂dp和px的换算关系。包括我，以及我见到的大多数开发，更多的时候其实不是很关心dp和px是如何来的，以及如何转换的，只知道掌握一般情况用dp，字体大小用sp，画线用px。&lt;/p&gt;
&lt;p&gt;2，设计妹原因，设计不出dp标注，或者甚至就不懂dp是什么东东。大多数公司并不会为Android专门做一套设计稿，只会出一版iOS设计稿，而iOS的设计稿都是用px去标注的，又因为上面的第一个原因，Android程序猿也搞不明白标注的px应该用多少dp。&lt;/p&gt;
&lt;p&gt;下面我们就用简单的方式去增进程序猿和设计妹感情吧！&lt;/p&gt;
&lt;p&gt;首先，我们要了解这张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150125224509843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里面列举了目前Android开发常见的5种dpi，dpi是指每英寸的像素（例如：一个宽是1.5英寸240像素，高是2英寸320像素的手机的dpi是：240px/1.5in=320px/2in=160dpi，既对角线上的每英寸的像素），上面这张表里还少一种，就是LDPI，是MDPI的0.75倍，也就是120DPI。&lt;/p&gt;
&lt;p&gt;下面这张图是各种dpi对应的主流手机屏幕：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150125224550469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;请按照图中下方的公式，分别计算一下屏幕dpi。在mdpi中，dp/pixel = DPI/160，即1dip等价于DPI为160的设备中的1个像素点。那么在xhdpi 320dpi中，就是1dp等价于2像素（再次强调，一定用计算器算一算啊，还有dpi是对角线上的像素密度）。&lt;/p&gt;
&lt;p&gt;一般情况设计妹出的图会是xhdpi，既能照顾iOS，又会照顾到Android。既然是xhdpi，我们就可以用1dp=2px来应对设计妹的标注。如果不是xhdpi的图，你也可以按照这个0.75:1:1.5:2:3:4这个比例去换算一下。&lt;/p&gt;
&lt;p&gt;帮到这里了，剩下的还得看你的修为了。&lt;/p&gt;
&lt;p&gt;下面我再给出几个常用的&amp;#20540;：&lt;/p&gt;
&lt;p&gt;Launcher icon：48dp*48dp&lt;/p&gt;
&lt;p&gt;Action bar icons：32dp*32dp&lt;/p&gt;
&lt;p&gt;Small icons：16dp*16dp&lt;/p&gt;
&lt;p&gt;Notification icons：24dp*24dp&lt;/p&gt;
&lt;p&gt;如果这些你还不满意，再给你来张图，包你满意：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150125224602388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;内容参考与网络和&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html#range&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果打不开的话请看这里&lt;a href=&quot;http://www.kennethyo.me/post/category/cheng-xu-yuan-de-wu-qi-zhi-vpn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《程序员的武器之一VPN》&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2015/1/25 22:44:22 [原文链接](http://blog.csdn.net/kennethyo/article/details/43123731)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：1117 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/43123731#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多Android程序猿已经对身边的设计妹垂涎三尺了，那么如何博得设计妹的好感呢，学好这篇文章就可以了。&lt;/p&gt;
&lt;p&gt;程序猿与UI设计妹讨论设计稿和切图的时候，经常会因为dp和px的问题搞的不愉快，这里可以分析出两个原因：&lt;/p&gt;
&lt;p&gt;1，程序猿原因，不懂dp和px
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]CardView初级使用</title>
    <link href="http://yoursite.com/2014/12/28/%E5%8E%9F-CardView%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2014/12/28/原-CardView初级使用/</id>
    <published>2014-12-28T06:08:54.000Z</published>
    <updated>2016-06-08T06:46:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;CardView&lt;/code&gt;发布于android sdk v7的支持包中，具体如何将项目加入v7包，请看这里&lt;a href=&quot;http://kennethyo.farbox.com/post/android/recyclerviewchu-ji-shi-yong#main&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;卡片化是全新的Material风&amp;#26684;设计中重要的组成部分之一，卡片设计适合重要信息的展示，以及在list中作为一个包含有复杂操作的item使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CardView&lt;/code&gt;继承于&lt;code&gt;Framelayout&lt;/code&gt;，比&lt;code&gt;FrameLayout&lt;/code&gt;多了3个重要的属性，&lt;code&gt;card_view:cardElevation&lt;/code&gt;，&lt;code&gt;card_view:cardCornerRadius&lt;/code&gt;，&lt;code&gt;card_view:cardBackgroundColor&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;card_view:cardElevation&lt;/code&gt;，可以设置卡片的阴影，可以使&lt;code&gt;CardView&lt;/code&gt;在z轴方向上有一种抬升的视觉效果，能给用户一种这里是重要信息的视觉感受。对应代码里的方法&lt;code&gt;public
 void setCardElevation (float radius)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;card_view:cardCornerRadius&lt;/code&gt;，显然就是设置&lt;code&gt;CardView&lt;/code&gt;的圆角了。对应代码里的方法&lt;code&gt;public
 void setRadius (float radius)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;card_view:cardBackgroundColor&lt;/code&gt;，设置&lt;code&gt;CardView&lt;/code&gt;的背景颜色，这个属性是不会影响阴影&lt;code&gt;card_view:cardElevation&lt;/code&gt;的效果的。对应代码里的方法&lt;code&gt;public
 void setCardBackgroundColor (int color)&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;android.support.v7.widget.CardView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@&amp;#43;id/cardview&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;fill_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;card_view:cardElevation=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;100dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;card_view:cardBackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@color/grey&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;card_view:cardCornerRadius=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;8dp&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_marginLeft=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@dimen/margin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_marginRight=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@dimen/margin&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;TextView&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_margin=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@dimen/margin&amp;quot;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;这里是CardView&amp;quot;&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;/android.support.v7.widget.CardView&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;这里贴一个Android官方给的&lt;a href=&quot;https://github.com/googlesamples/android-CardView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample&lt;/a&gt;吧!&lt;/p&gt;
&lt;p&gt;—————————————&lt;/p&gt;
&lt;p&gt;从11月19日开始一直在加班，把大把的时间都用于了我们岁末版本的开发上，这期间规划了好几篇想要写的博文，慢慢会发出来的，主要还是偏于介绍新控件的使用，以及如何兼容lollipop以下版本进行material风&amp;#26684;的设计，material风&amp;#26684;设计也将会是我所在项目组15年第一季度android的全新设计方案。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color:rgb(221,17,68); font-family:Inconsolata,monospace,sans-serif; line-height:30px; white-space:pre-wrap; background-color:rgb(247,247,249)&quot;&gt;（转载请注明出处：&lt;a href=&quot;http://kennethyo.farbox.com/post/android/2014-12-28）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kennethyo.farbox.com/post/android/2014-12-28）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/12/28 14:08:54 [原文链接](http://blog.csdn.net/kennethyo/article/details/42213525)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：2090 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/42213525#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;CardView&lt;/code&gt;发布于android sdk v7的支持包中，具体如何将项目加入v7包，请看这里&lt;a href=&quot;http://kennethyo.farbox.com/post/android/recyclerviewchu-ji-shi-yon
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>[原]RecyclerView初级使用</title>
    <link href="http://yoursite.com/2014/11/10/%E5%8E%9F-RecyclerView%E5%88%9D%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2014/11/10/原-RecyclerView初级使用/</id>
    <published>2014-11-10T07:18:15.000Z</published>
    <updated>2016-06-08T06:46:32.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;span style=&quot;font-family:Inconsolata,monospace,sans-serif; font-size:12px; color:#dd1144&quot;&gt;&lt;span style=&quot;white-space:pre-wrap; background-color:rgb(247,247,249)&quot;&gt;（转载请注明出处：&lt;a href=&quot;http://www.kennethyo.me/post/android/recyclerviewchu-ji-shi-yong）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kennethyo.me/post/android/recyclerviewchu-ji-shi-yong）&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RecyclerView&lt;/code&gt;是Android在v7包中包含了一个新的widget，&lt;code&gt;RecyclerView&lt;/code&gt;是一个&lt;code&gt;ListView&lt;/code&gt;进阶版，但不继承与&lt;code&gt;AdapterView&lt;/code&gt;，相比&lt;code&gt;ListView&lt;/code&gt;，&lt;code&gt;RecyclerView&lt;/code&gt;更加灵活和先进。&lt;/p&gt;
&lt;p&gt;##&lt;br&gt;1，导入RecyclerView&lt;/p&gt;
&lt;p&gt;首先要保证&lt;code&gt;SDK Tools&lt;/code&gt;和&lt;code&gt;Android
 Support Repository&lt;/code&gt;为最新版。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141110151947150?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141110152010581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其次，在你的demo工程里选中Project Structure按钮，并且选择app —— Dependencies —— “&amp;#43;” —— Library dependency，去添加支持包，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141110152138031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，在新的对话框里选中&lt;code&gt;com.android.support:recyclerview-v7:21.0.0&lt;/code&gt;，点击OK。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141110152155781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里就顺利的导入了&lt;code&gt;RecyclerView&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;##&lt;br&gt;2，使用&lt;code&gt;RecyclerView&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在布局文件中使用&lt;code&gt;RecyclerView&lt;/code&gt;，跟其他自定义控件一样，如下：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;RelativeLayout&lt;/span&gt; &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;&lt;a href=&quot;http://schemas.android.com/apk/res/android&amp;amp;quot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://schemas.android.com/apk/res/android&amp;amp;quot&lt;/a&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;&lt;a href=&quot;http://schemas.android.com/tools&amp;amp;quot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://schemas.android.com/tools&amp;amp;quot&lt;/a&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;tools:context=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;android.support.v7.widget.RecyclerView&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@&amp;#43;id/recyclerView&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;因为日常开发中，我们大多数都是按照UI去布局每个item，所以这里我没与图省事用Android自带的布局。如下：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;cp&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;&lt;a href=&quot;http://schemas.android.com/apk/res/android&amp;amp;quot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://schemas.android.com/apk/res/android&amp;amp;quot&lt;/a&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;TextView&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@&amp;#43;id/textView&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;48dp&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:textStyle=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;bold&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:background=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@android:color/holo_blue_light&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:textColor=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@android:color/holo_red_light&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:gravity=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;center_vertical&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:paddingLeft=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot; style=&quot;color:rgb(204,147,147)&quot;&gt;&amp;quot;New Text&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;nt&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;下面就是代码了：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;nd&quot; style=&quot;color:rgb(204,204,204)&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;recyclerView&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//LinearLayoutManager可以自定义实现不同的动画效果和布局效果&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//这里设置为LinearLayoutManager.HORIZONTAL变成为了一个可以横向滑动的ListView，赞不赞？&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;LinearLayoutManager&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;layoutManager&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;LinearLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;LinearLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;VERTICAL&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot; style=&quot;color:rgb(220,163,163)&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setLayoutManager&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;layoutManager&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setHasFixedSize&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot; style=&quot;color:rgb(220,163,163)&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//adapter的改变不会改变RecyclerView的大小&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;];&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;&amp;#43;&amp;#43;){&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;StringRecyclerAdapter&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;StringRecyclerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;recyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;可以明确看到的是，&lt;code&gt;RecyclerView&lt;/code&gt;通过&lt;code&gt;(RecyclerView)
 findViewById(R.id.recyclerView)&lt;/code&gt;初始化之后，不仅要像&lt;code&gt;ListView&lt;/code&gt;一样要放入&lt;code&gt;Adapter&lt;/code&gt;进行数据和布局的适配，而且还要额外添加一个&lt;code&gt;LinearLayoutManager&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个Manager就是我们的布局管理工具类，这里不仅可以用常规的竖直方向布局，还有横向的滑动的布局，以后再也不会因为没有横向滑动的&lt;code&gt;ListView&lt;/code&gt;去头疼自定义了。&lt;/p&gt;
&lt;p&gt;通过自定义&lt;code&gt;LinearLayoutManager&lt;/code&gt;也可以实现不同的动画效果，和移动效果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RecyclerView&lt;/code&gt;的Adapter和&lt;code&gt;ListView&lt;/code&gt;的Adapter也是不同的，&lt;code&gt;RecyclerView&lt;/code&gt;的Adapter要继承&lt;code&gt;RecyclerView.Adapter&amp;amp;lt;VH
 extends ViewHolder&amp;amp;gt;&lt;/code&gt;,并且&lt;code&gt;ViewHolder&lt;/code&gt;要继承与&lt;code&gt;ViewHolder.RecyclerView&lt;/code&gt;，具体代码如下：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;StringRecyclerAdapter&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;StringRecyclerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;StringRecyclerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;nd&quot; style=&quot;color:rgb(204,204,204)&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;onCreateViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;ViewGroup&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;viewGroup&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;viewGroup&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;adapter_string_recylcer&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot; style=&quot;color:rgb(220,163,163)&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;br&gt;       &lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//这里发现不给item布局添加LayoutParams，会直接默认为WRAP_CONTENT，WRAP_CONTENT布局。&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setPadding&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setFocusable&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot; style=&quot;color:rgb(220,163,163)&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;LayoutParams&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;lp&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;ViewGroup&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;MATCH_PARENT&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt;&lt;br&gt;                &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;ViewGroup&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;WRAP_CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;leftMargin&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;rightMargin&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;topMargin&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;bottomMargin&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setLayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;lp&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;viewHolder&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;viewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;nd&quot; style=&quot;color:rgb(204,204,204)&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;onBindViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;viewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;viewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;StringRecyclerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getSimpleName&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;&amp;#43;&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;getValueAt&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;));&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;getValueAt&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;];&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;nd&quot; style=&quot;color:rgb(204,204,204)&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;getItemCount&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot; style=&quot;color:rgb(220,163,163)&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot; style=&quot;color:rgb(140,208,211)&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;RecyclerView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;ViewHolder&lt;/span&gt; &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;OnClickListener&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;ViewHolder&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;itemView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;itemView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;itemView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//因为RecyclerView没用setOnItemClickListener，所以在这里实现了点击事件&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//况且，现在有越来越多的设计，会在每个item点击不同位置，有不同的响应&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;nd&quot; style=&quot;color:rgb(204,204,204)&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(),((&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code&gt;onCreateViewHolder&lt;/code&gt;方法中，我们需要把加载布局和&lt;code&gt;ViewHolder&lt;/code&gt;绑定起来，这里有个问题，不知道是Android的bug，还是故意这么设计的，需要我们主动写代码给item设置&lt;code&gt;LayoutParams&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;onBindViewHolder&lt;/code&gt;中负责数据绑定。&lt;/p&gt;
&lt;p&gt;这里有一个问题，&lt;code&gt;RecyclerView&lt;/code&gt;没有&lt;code&gt;setOnItemClickListener&lt;/code&gt;方法，所以我在里面对&lt;code&gt;TextView&lt;/code&gt;添加了点击事件，现在有越来越多的设计，会在每个item点击不同位置，有不同的响应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141110152225296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KennethYo/RecyclerViewDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo链接&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/11/10 15:18:15 [原文链接](http://blog.csdn.net/kennethyo/article/details/40981263)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：1221 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/40981263#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-family:Inconsolata,monospace,sans-serif; font-size:12px; color:#dd1144&quot;&gt;&lt;span style=&quot;white-space:pre-wrap; background-c
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]Palette的使用</title>
    <link href="http://yoursite.com/2014/11/04/%E5%8E%9F-Palette%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2014/11/04/原-Palette的使用/</id>
    <published>2014-11-04T08:19:53.000Z</published>
    <updated>2016-06-08T06:46:20.000Z</updated>
    
    <content type="html">&lt;p&gt;（转载，请注明出处：&lt;a href=&quot;http://www.kennethyo.me/post/android/palettechu-ji-shi-yong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kennethyo.me/post/android/palettechu-ji-shi-yong&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;相信有不少的人已经开始关注Android Lollipop，全新的Material设计风&amp;#26684;让人&amp;#30524;前一亮，Material强调大胆的阴影和高亮搭配，引用那些意料之外和充满活力的颜色。&lt;/p&gt;
&lt;p&gt;这里就要说到，不久前Android在v7包中更新的&lt;a href=&quot;http://developer.android.com/reference/android/support/v7/graphics/Palette.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Palette&lt;/a&gt;。Palette可以让我们构造色彩鲜艳的界面更加方便，通过一个图片的&lt;code&gt;bitmap&lt;/code&gt;来获取图片当中明暗对比的颜色。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;初始化Palette&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Palette&lt;/code&gt;通过一个静态方法进行初始化，并且需要传入一个&lt;code&gt;bitmap&lt;/code&gt;，这个&lt;code&gt;bitmap&lt;/code&gt;是我们要获取颜色图片的位图。&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Palette&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;还有一个异步方法：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//提供了一个异步方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;generateAsync&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot; style=&quot;color:rgb(240,223,175)&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;PaletteAsyncListener&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;nd&quot; style=&quot;color:rgb(204,204,204)&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;kd&quot; style=&quot;color:rgb(255,255,134)&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot; style=&quot;color:rgb(0,205,0)&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot; style=&quot;color:rgb(239,239,143)&quot;&gt;onGenerated&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;Palette&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;});&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;###&lt;br&gt;获取&lt;code&gt;Palette.Swatch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过以下几种方法获取相应的&lt;code&gt;Palette.Swatch&lt;/code&gt;，&lt;code&gt;Palette.Swatch&lt;/code&gt;是包含我们获取到颜色的一个载体&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getLightVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getLightMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getDarkVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getDarkMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;###&lt;br&gt;通过&lt;code&gt;Palette.Swatch&lt;/code&gt;获取到颜色&lt;/p&gt;
&lt;p&gt;针对Android，&lt;code&gt;Palette.Swatch.getRgb()&lt;/code&gt;返回一个&lt;code&gt;int&lt;/code&gt;RGB颜色&amp;#20540;。例如如下的用法：&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;color:rgb(102,102,102); font-family:Helvetica,arial,&#39;Hiragino Sans GB&#39;,&#39;Microsoft Yahei&#39;,Verdana,Arial,sans-serif; font-size:15px; line-height:30px; background-color:rgb(253,253,253)&quot;&gt;&lt;br&gt;&lt;pre style=&quot;margin-top:1.6em; margin-bottom:1.6em; border:1px solid rgb(227,237,243); width:910px; padding:10px; font-family:Inconsolata,monospace,sans-serif; font-size:0.9em; overflow:auto; word-break:break-word; color:rgb(253,206,147); background:rgb(63,63,63)&quot;&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv1&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;tv1&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个活力的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv1&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getRgb&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个柔和的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv1&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setBackgroundColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getRgb&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv2&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;tv2&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个活力的亮色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv2&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getLightVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getRgb&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个柔和的亮色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv2&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setBackgroundColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getLightMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getRgb&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv3&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;tv3&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个活力的暗色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv3&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getDarkVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getRgb&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个柔和的暗色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv3&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setBackgroundColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getDarkMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getRgb&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv4&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;tv4&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个适合做标题的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv4&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getVibrantSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getTitleTextColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;c1&quot; style=&quot;color:rgb(127,159,127)&quot;&gt;//返回一个适合做主题的颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;tv4&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;setBackgroundColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot; style=&quot;color:rgb(220,220,204)&quot;&gt;palette&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getDarkMutedSwatch&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot; style=&quot;color:rgb(154,195,159)&quot;&gt;getBodyTextColor&lt;/span&gt;&lt;span class=&quot;o&quot; style=&quot;color:rgb(240,239,208)&quot;&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141105134308933?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;总体上看，Palette的使用简单，没有复杂的方法，更方便我们针对material风&amp;#26684;进行开发。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KennethYo/PaletteDemo/tree/master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo地址&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/11/4 16:19:53 [原文链接](http://blog.csdn.net/kennethyo/article/details/40786685)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：692 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/40786685#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;（转载，请注明出处：&lt;a href=&quot;http://www.kennethyo.me/post/android/palettechu-ji-shi-yong&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kennethyo.me/po
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]LayoutInflater.inflate详解</title>
    <link href="http://yoursite.com/2014/10/24/%E5%8E%9F-LayoutInflater-inflate%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2014/10/24/原-LayoutInflater-inflate详解/</id>
    <published>2014-10-24T08:27:08.000Z</published>
    <updated>2016-06-08T06:46:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍常见inflate方法&quot;&gt;&lt;a href=&quot;#介绍常见inflate方法&quot; class=&quot;headerlink&quot; title=&quot;介绍常见inflate方法&quot;&gt;&lt;/a&gt;介绍常见inflate方法&lt;/h2&gt;&lt;p&gt;在日常开发中经常会用到通过资源id去获取view的场景，我们通常有四种方式去获取view，分别是以下四种：&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_1_2164263&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;//1,通过系统服务获取布局加载器
LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);

View view = inflater.inflate(resource,root,attachToRoot);

//2,通过activity中的getLayoutInflater()方法
View view = getLayoutInflater().inflate(resource,root,attachToRoot);

//3,通过View的静态inflate()方法
View view = View.inflate(resource,root,attachToRoot);

//4,通过LayoutInflater的inflate()方法
View view = LayoutInflater.from(this).inflate(resource,root,attachToRoot);
&lt;/pre&gt;

&lt;p&gt;通过对上述方法的源码的分析，很容易看出来这些方法都是最终调用了方式1，获取系统布局加载器的方式，来进行获取&lt;code&gt;View&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这里我列举的并没有&lt;code&gt;inflate(int resource, ViewGroup root)&lt;/code&gt;这个重载方法，是因为他们最终都会到调用为&lt;code&gt;inflate(int resource, ViewGroup root, boolean attachToRoot)&lt;/code&gt;方法，如下：&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_2_263903&quot; name=&quot;code&quot; class=&quot;java&quot;&gt; public View inflate(int resource, ViewGroup root) {
        return inflate(resource, root, root != null);
 }

 public View inflate(int resource, ViewGroup root, boolean attachToRoot) {
        if (DEBUG) System.out.println(&amp;quot;INFLATING from resource: &amp;quot; + resource);
        XmlResourceParser parser = getContext().getResources().getLayout(resource);
        try {
            return inflate(parser, root, attachToRoot);
        } finally {
            parser.close();
        }
 }&lt;/pre&gt;

&lt;p&gt;这里要说明一下，其实最终要调用的是&lt;code&gt;inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)&lt;/code&gt;方法，只不过这里把布局资源解析为了XmlPull解析器，这里就不针对&lt;code&gt;XmlPullParser&lt;/code&gt;进行研究了。&lt;/p&gt;
&lt;h2 id=&quot;针对传入的参数不同进行分析&quot;&gt;&lt;a href=&quot;#针对传入的参数不同进行分析&quot; class=&quot;headerlink&quot; title=&quot;针对传入的参数不同进行分析&quot;&gt;&lt;/a&gt;针对传入的参数不同进行分析&lt;/h2&gt;&lt;p&gt;通过对&lt;code&gt;inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)&lt;/code&gt;方法的源码进行解读，&lt;code&gt;XmlPullParser parser&lt;/code&gt;是对传入&lt;code&gt;int resource&lt;/code&gt;的xml解析器，不用去主要考虑，那就需要考虑传入&lt;code&gt;ViewGroup root, boolean attachToRoot&lt;/code&gt;的&amp;#20540;不同，会出现什么结果呢？&lt;/p&gt;
&lt;p&gt;源码中有几个重要的代码块：&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_3_3719874&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;if (root != null) {
if (DEBUG) {
System.out.println(&amp;quot;Creating params from root: &amp;quot; +
                                    root);
}
// 如果root不等于null，获取它的LayoutParams
  params = root.generateLayoutParams(attrs);
if (!attachToRoot) {
//attachToRoot等于false，把root的LayoutParams属性给temp
temp.setLayoutParams(params);
}
}
&lt;/pre&gt;

&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_4_4700610&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;//attachToRoot等于true，将temp加入到root这个viewGroup中
if (root != null &amp;amp;&amp;amp; attachToRoot) {
root.addView(temp, params);
}

// root等于null，attachToRoot等于false，直接把temp赋值给返回结果
if (root == null || !attachToRoot) {
  result = temp;
}&lt;/pre&gt;

&lt;h2 id=&quot;根据不同的传-20540-进行实现&quot;&gt;&lt;a href=&quot;#根据不同的传-20540-进行实现&quot; class=&quot;headerlink&quot; title=&quot;根据不同的传&amp;#20540;进行实现&quot;&gt;&lt;/a&gt;根据不同的传&amp;#20540;进行实现&lt;/h2&gt;&lt;p&gt;两个布局文件，一个作为root，一个作为我们的要获取的view&lt;/p&gt;
&lt;p&gt;activity_my.xml&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_5_9900685&quot; name=&quot;code&quot; class=&quot;html&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    tools:context=&amp;quot;.MyActivity&amp;quot;&amp;gt;

    &amp;lt;TextView
        android:text=&amp;quot;@string/hello_world&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot; /&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;&lt;/pre&gt;

&lt;p&gt;view.xml&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_6_881422&quot; name=&quot;code&quot; class=&quot;html&quot;&gt;&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;120dp&amp;quot;
    android:layout_height=&amp;quot;120dp&amp;quot;
    android:background=&amp;quot;@color/blue&amp;quot;&amp;gt;

    &amp;lt;TextView
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;hello inflate&amp;quot;
        android:textColor=&amp;quot;@android:color/white&amp;quot; /&amp;gt;

&amp;lt;/LinearLayout&amp;gt;&lt;/pre&gt;

&lt;p&gt;1,rootView等于null，attachToRoot等于false&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_7_1272731&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
    view = getLayoutInflater().inflate(R.layout.view, null, false);
    setContentView(view);
}&lt;/pre&gt;

&lt;p&gt;本身root为null，就不会去获取view的LayoutParams，直接走&lt;code&gt;result = temp;&lt;/code&gt;返回result，此时result等于view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141024160656796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么会充满屏幕呢，因为当把view设置到activity的视图时，系统会取当前window的LayoutParm作为view的LayoutParm&lt;/p&gt;
&lt;p&gt;2,rootView等于null，attachToRoot等于true&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_8_9504448&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
    view = getLayoutInflater().inflate(R.layout.view, null, true);
    setContentView(view);
}&lt;/pre&gt;

&lt;p&gt;root等于null，依然走&lt;code&gt;result = temp;&lt;/code&gt;，此时result等于view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141024160851796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么会充满屏幕呢，因为当把view设置到activity的视图时，系统会取当前window的LayoutParm作为view的LayoutParm&lt;/p&gt;
&lt;p&gt;3,rootView不等于null，attachToRoot等于false&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_9_1880625&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
rootView = getLayoutInflater().inflate(R.layout.activity_my, null);
    view = getLayoutInflater().inflate(R.layout.view,(ViewGroup)rootView,false);
    setContentView(view);
}&lt;/pre&gt;

&lt;p&gt;root不等于null，attachToRoot等于false，会走取view的LayoutParams并且赋&amp;#20540;给temp，再走&lt;code&gt;result = temp;&lt;/code&gt;，此时result等于view&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141024160912700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么会充满屏幕呢，因为当把view设置到activity的视图时，系统会取当前window的LayoutParm作为view的LayoutParm&lt;/p&gt;
&lt;p&gt;4,rootView不等于null，attachToRoot等于true&lt;/p&gt;
&lt;pre code_snippet_id=&quot;495633&quot; snippet_file_name=&quot;blog_20141024_10_3941156&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
rootView = getLayoutInflater().inflate(R.layout.activity_my, null);
    view = getLayoutInflater().inflate(R.layout.view,(ViewGroup)rootView,true);
    setContentView(view);
}&lt;/pre&gt;

&lt;p&gt;rootView不等于null，attachToRoot等于true，会首先获取view的Params，再走&lt;code&gt;root.addView(temp, params)&lt;/code&gt;，也就是，把view先放入的root这个ViewGroup中，再返回result，因为初始化的时候result就等于root，此时返回的就是包含有子View的root。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20141024160942932?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里因为root的布局为RelativeLayout，我们把view加入到root中，view本身保留了自有的LayoutParm&lt;/p&gt;
&lt;p&gt;最后我要吐槽，为什么csdn不支持markdown，我都是先用Mou写好的，贴过来竟然要自己重新排版。。。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/10/24 16:27:08 [原文链接](http://blog.csdn.net/kennethyo/article/details/40429031)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：1061 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/40429031#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍常见inflate方法&quot;&gt;&lt;a href=&quot;#介绍常见inflate方法&quot; class=&quot;headerlink&quot; title=&quot;介绍常见inflate方法&quot;&gt;&lt;/a&gt;介绍常见inflate方法&lt;/h2&gt;&lt;p&gt;在日常开发中经常会用到通过资源id去获取view的场
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]Android API，版本对照</title>
    <link href="http://yoursite.com/2014/08/22/%E5%8E%9F-Android-API%EF%BC%8C%E7%89%88%E6%9C%AC%E5%AF%B9%E7%85%A7/"/>
    <id>http://yoursite.com/2014/08/22/原-Android-API，版本对照/</id>
    <published>2014-08-22T02:51:53.000Z</published>
    <updated>2016-06-08T06:45:56.000Z</updated>
    
    <content type="html">&lt;div class=&quot;para&quot; style=&quot;font-family:Arial; font-size:14px; line-height:26px&quot;&gt;&lt;br&gt;&lt;br&gt;###&lt;br&gt;&lt;br&gt;### &lt;strong&gt;API等级1： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 1.0&amp;nbsp;&lt;br&gt;&lt;br&gt;API等级2： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 1.1 Petit Four &amp;nbsp;花式小蛋糕&lt;br&gt;&lt;br&gt;API等级3： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 1.5 Cupcake &amp;nbsp;纸杯蛋糕&lt;br&gt;&lt;br&gt;API等级4： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 1.6 Donut &amp;nbsp;甜甜圈&lt;br&gt;&lt;br&gt;API等级5： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 2.0 Éclair &amp;nbsp; 松饼&lt;br&gt;&lt;br&gt;API等级6： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 2.0.1 Éclair &amp;nbsp;松饼&lt;br&gt;&lt;br&gt;API等级7： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 2.1 Éclair &amp;nbsp; 松饼&lt;br&gt;&lt;br&gt;API等级8： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 2.2 - 2.2.3 Froyo &amp;nbsp;冻酸奶&lt;br&gt;&lt;br&gt;API等级9： &amp;nbsp;&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 2.3 - 2.3.2 Gingerbread &amp;nbsp;姜饼&lt;br&gt;&lt;br&gt;API等级10：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 2.3.3-2.3.7 Gingerbread &amp;nbsp; 姜饼&lt;br&gt;&lt;br&gt;API等级11：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 3.0 Honeycomb 蜂巢&lt;br&gt;&lt;br&gt;API等级12：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 3.1 Honeycomb 蜂巢&lt;br&gt;&lt;br&gt;API等级13：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 3.2 Honeycomb 蜂巢&lt;br&gt;&lt;br&gt;API等级14：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 4.0 - 4.0.2 Ice Cream Sandwich &amp;nbsp;冰激凌三明治&lt;br&gt;&lt;br&gt;API等级15：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 4.0.3 - 4.0.4 Ice Cream Sandwich &amp;nbsp;冰激凌三明治&lt;br&gt;&lt;br&gt;API等级16：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 4.1 Jelly Bean &amp;nbsp;糖豆&lt;br&gt;&lt;br&gt;API等级17：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 4.2 Jelly Bean &amp;nbsp;糖豆&lt;br&gt;&lt;br&gt;API等级18：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 4.3 Jelly Bean &amp;nbsp;糖豆&lt;br&gt;&lt;br&gt;API等级19：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android 4.4 KitKat &amp;nbsp;奇巧巧克力棒&lt;br&gt;&lt;br&gt;API等级20：&lt;span style=&quot;white-space:pre&quot;&gt; &lt;/span&gt;Android L&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/8/22 10:51:53 [原文链接](http://blog.csdn.net/kennethyo/article/details/38752431)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：410 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/38752431#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;div class=&quot;para&quot; style=&quot;font-family:Arial; font-size:14px; line-height:26px&quot;&gt;&lt;br&gt;&lt;br&gt;###&lt;br&gt;&lt;br&gt;### &lt;strong&gt;API等级1： &amp;nbsp;&lt;span style=&quot;whit
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[译]Android文本的测量和绘制</title>
    <link href="http://yoursite.com/2014/06/23/%E8%AF%91-Android%E6%96%87%E6%9C%AC%E7%9A%84%E6%B5%8B%E9%87%8F%E5%92%8C%E7%BB%98%E5%88%B6/"/>
    <id>http://yoursite.com/2014/06/23/译-Android文本的测量和绘制/</id>
    <published>2014-06-23T03:20:50.000Z</published>
    <updated>2016-06-08T06:45:05.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;翻译与&lt;a href=&quot;http://chris.banes.me/#blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chris Banes的博客&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a href=&quot;http://chris.banes.me/2014/03/27/measuring-text/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;如果你想手动在Android Canvas上画些什么东西，你最好从绘制文本开始。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;文本绘制之前，你需要知道测量文本的绘制位置，计算文本X/Y轴的位置。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;最近我在一款APP中，需要在横向和纵向的画布上绘制一些以文本为中心的文字。于是我用了下面这些代码：&lt;/span&gt;&lt;/p&gt;
&lt;pre code_snippet_id=&quot;402800&quot; snippet_file_name=&quot;blog_20140623_1_1957768&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;Paint mTextPaint = new Paint();  
mTextPaint.setTextAlign(Paint.Align.CENTER); // Center the text

// Later when you draw...
canvas.drawText(mText, // Text to display  
        mBounds.centerX(), // Center X of canvas bounds
        mBounds.centerY(), // Center Y of canvas bounds
        mTextPaint
);&lt;/pre&gt;&lt;span style=&quot;font-size:18px&quot;&gt;

我没想到代码的运行后竟然是下面的这个样子：&lt;/span&gt;

![](http://chris.banes.me/content/images/2014/Mar/Screenshot_2014-03-27-14-41-58.png)

&lt;span style=&quot;font-size:32px&quot;&gt;测量文本&lt;/span&gt;

&lt;span style=&quot;font-size:18px&quot;&gt;

&lt;/span&gt;

&lt;span style=&quot;font-size:18px&quot;&gt;接下来，我尝试定位文本，计算了文本的高宽度，并且修改了绘制文本X轴Y轴的位置：&lt;/span&gt;

&lt;span style=&quot;font-size:18px&quot;&gt;

&lt;/span&gt;

&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;

&lt;pre code_snippet_id=&quot;402800&quot; snippet_file_name=&quot;blog_20140623_2_8130520&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;int mTextWidth, mTextHeight; // Our calculated text bounds  
Paint mTextPaint = new Paint();

// Now lets calculate the size of the text
Rect textBounds = new Rect();  
mTextPaint.getTextBounds(mText, 0, mText.length(), textBounds);  
mTextWidth = textBounds.width();  
mTextHeight = textBounds.height();

// Later when you draw...
canvas.drawText(mText, // Text to display  
        mBounds.centerX() - (mTextWidth / 2f),
        mBounds.centerY() + (mTextHeight / 2f),
        mTextPaint
);&lt;/pre&gt;

&lt;p&gt;这一次我们做的已经相当接近了，但是你可以看到文本还是没有居中。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;img src=&quot;http://chris.banes.me/content/images/2014/Mar/Screenshot_2014-03-27-14-48-48.png&quot; alt=&quot;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;为了确定我没看到的原因，我用Paint.getTextBounds()计算一个矩形，并画在了文本的后面。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;img src=&quot;http://chris.banes.me/content/images/2014/Mar/Screenshot_2014-03-27-14-50-33.png&quot; alt=&quot;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;正如你看到的，文本的高宽绘制在了计算范围之外。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:32px&quot;&gt;另一中测量文本的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:24px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;在这个基础点上，我看到Paint另一种计算文本宽度的方法：Paint.measureText()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;这个方法只能计算宽度而不能计算高度，因此我尝试结合两种方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre code_snippet_id=&quot;402800&quot; snippet_file_name=&quot;blog_20140623_3_9003355&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;int mTextWidth, mTextHeight; // Our calculated text bounds  
Paint mTextPaint = new Paint();

// Now lets calculate the size of the text
Rect textBounds = new Rect();  
mTextPaint.getTextBounds(mText, 0, mText.length(), textBounds);  
mTextWidth = mTextPaint.measureText(mText); // Use measureText to calculate width  
mTextHeight = textBounds.height(); // Use height from getTextBounds()

// Later when you draw...
canvas.drawText(mText, // Text to display  
        mBounds.centerX() - (mTextWidth / 2f),
        mBounds.centerY() + (mTextHeight / 2f),
        mTextPaint
);&lt;/pre&gt;

&lt;p&gt;这几下就做出了完美居中的文本。悠嘻！&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;img src=&quot;http://chris.banes.me/content/images/2014/Mar/perfect.png&quot; alt=&quot;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/6/23 11:20:50 [原文链接](http://blog.csdn.net/kennethyo/article/details/33720589)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：773 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/33720589#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;翻译与&lt;a href=&quot;http://chris.banes.me/#blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chris Banes的博客&lt;/a&gt;&amp;nbsp; &amp;nbsp;&lt;a hr
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]自定义TextView实现内容的旋转和偏移</title>
    <link href="http://yoursite.com/2014/05/08/%E5%8E%9F-%E8%87%AA%E5%AE%9A%E4%B9%89TextView%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AE%B9%E7%9A%84%E6%97%8B%E8%BD%AC%E5%92%8C%E5%81%8F%E7%A7%BB/"/>
    <id>http://yoursite.com/2014/05/08/原-自定义TextView实现内容的旋转和偏移/</id>
    <published>2014-05-08T06:10:00.000Z</published>
    <updated>2016-06-08T06:45:45.000Z</updated>
    
    <content type="html">&lt;p&gt;在一些设计上，设计师会要求我们的文字以45度显示，或者135度显示（如下图“抽奖”），可是android本身并没有提供TextView在布局文件中实现旋转的标签，这时候就需要我们去自定义TextView，并且重写onDraw（）方法实现效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140508114640671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面，让我们去实现这个效果吧。&lt;/p&gt;
&lt;p&gt;首先我们熟悉一下android view坐标系，android采用的X,Y横纵坐标系，X轴向右为正方向，Y轴向下为正方向，旋转方向为顺时针，如下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140508134205843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;默认我们的文字是在TextView左上角显示的，我们要旋转的也就是这个文字，而文字绘制的时候也是有一个范围的，例如下图，文字外面我标识出来的方框。而我们的操作的都是以TextView坐标系的原点进行移动和旋转。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140508135250531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;这样我们就确定我们要进行的操作，针对onDraw（）对canvas进行translate（移动）或者rotate（旋转）操作坐标系，这里要说明的一点是，按我的习惯来，肯定是先进行偏移再进行旋转，旋转后的坐标系，想必你看着也会很难受吧。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;下面是我重写的TextView的代码和效果图以及布局中的使用。我在Xml中自定义了标签，但是没有对标签内容进行约束，因为比较懒。。&lt;/p&gt;
&lt;pre code_snippet_id=&quot;333921&quot; snippet_file_name=&quot;blog_20140508_2_3197858&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;package com.example.rtv;

import android.content.Context;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.widget.TextView;

/**
 * text旋转的textview
 * @author Kenneth
 *
 */
public class RotateTextView extends TextView {
    private static final   String NAME_SPACE = &amp;quot;http://www.baidu.com/apk/res/custom&amp;quot;;

    private static final String ATTR_ROTATE = &amp;quot;rotate&amp;quot;;
    private static final int DEFAULT_VALUE_ROTATE = 0;

    private static final String ATTR_TRANSLATE_X= &amp;quot;translateX&amp;quot;;
    private static final String ATTR_TRANSLATE_Y = &amp;quot;translateY&amp;quot;;
    private static final float DEFAULT_VALUE_TRANSLATE_X = 0f;
    private static final float DEFAULT_VALUE_TRANSLATE_Y = 0f;

    private int rotate = DEFAULT_VALUE_ROTATE;

    private float translateX = DEFAULT_VALUE_TRANSLATE_X;
    private float translateY = DEFAULT_VALUE_TRANSLATE_Y;

    public RotateTextView(Context context, AttributeSet attrs) {
        super(context, attrs);
        rotate = attrs.getAttributeIntValue(NAME_SPACE, ATTR_ROTATE, DEFAULT_VALUE_ROTATE);//旋转度数

        translateX = attrs.getAttributeFloatValue(NAME_SPACE, ATTR_TRANSLATE_X, DEFAULT_VALUE_TRANSLATE_X);//获取在布局中的x轴偏移百分比
        translateY = attrs.getAttributeFloatValue(NAME_SPACE, ATTR_TRANSLATE_Y, DEFAULT_VALUE_TRANSLATE_Y);//获取在布局中的y轴偏移百分比
    }

    @Override
    protected void onDraw(Canvas canvas) {
        canvas.translate(getMeasuredWidth()*translateX, getMeasuredHeight()*translateY);
        //首先偏移在旋转，是因为，如果先旋转，本身xy坐标系也会跟着旋转，之后在偏移会不方便我们的控制，也不直观
        canvas.rotate(rotate);
        super.onDraw(canvas);
    }

}
&lt;/pre&gt;

&lt;pre code_snippet_id=&quot;333921&quot; snippet_file_name=&quot;blog_20140508_3_2020570&quot; name=&quot;code&quot; class=&quot;html&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    xmlns:custom=&amp;quot;http://www.baidu.com/apk/res/custom&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:paddingBottom=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
    android:paddingLeft=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
    android:paddingRight=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
    android:paddingTop=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
    tools:context=&amp;quot;com.example.rtv.MainActivity$PlaceholderFragment&amp;quot; &amp;gt;

    &amp;lt;com.example.rtv.RotateTextView
        android:id=&amp;quot;@+id/rotateTextView1&amp;quot;
        android:layout_width=&amp;quot;100dp&amp;quot;
        android:layout_height=&amp;quot;100dp&amp;quot;
        android:layout_centerInParent=&amp;quot;true&amp;quot;
        android:text=&amp;quot;@string/hello_world&amp;quot;
        custom:rotate=&amp;quot;45&amp;quot; /&amp;gt;

    &amp;lt;com.example.rtv.RotateTextView
        android:id=&amp;quot;@+id/rotateTextView2&amp;quot;
        android:layout_width=&amp;quot;100dp&amp;quot;
        android:layout_height=&amp;quot;100dp&amp;quot;
        android:layout_alignLeft=&amp;quot;@+id/rotateTextView1&amp;quot;
        android:layout_alignParentTop=&amp;quot;true&amp;quot;
        android:text=&amp;quot;@string/hello_world&amp;quot;
        custom:rotate=&amp;quot;135&amp;quot;
        custom:translateX=&amp;quot;1&amp;quot; /&amp;gt;

    &amp;lt;com.example.rtv.RotateTextView
        android:id=&amp;quot;@+id/rotateTextView3&amp;quot;
        android:layout_width=&amp;quot;100dp&amp;quot;
        android:layout_height=&amp;quot;100dp&amp;quot;
        android:layout_alignLeft=&amp;quot;@+id/rotateTextView1&amp;quot;
        android:layout_alignParentBottom=&amp;quot;true&amp;quot;
        android:text=&amp;quot;@string/hello_world&amp;quot;
        custom:rotate=&amp;quot;135&amp;quot;
        custom:translateX=&amp;quot;0.5&amp;quot;
        custom:translateY=&amp;quot;0.5&amp;quot; /&amp;gt;

    &amp;lt;TextView
        android:id=&amp;quot;@+id/textView1&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_alignBaseline=&amp;quot;@+id/rotateTextView2&amp;quot;
        android:layout_alignBottom=&amp;quot;@+id/rotateTextView2&amp;quot;
        android:layout_toRightOf=&amp;quot;@+id/rotateTextView2&amp;quot;
        android:text=&amp;quot;向X轴正方向偏移100%，旋转135°&amp;quot; /&amp;gt;

    &amp;lt;TextView
        android:id=&amp;quot;@+id/textView2&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_alignTop=&amp;quot;@+id/rotateTextView1&amp;quot;
        android:layout_marginTop=&amp;quot;14dp&amp;quot;
        android:layout_toRightOf=&amp;quot;@+id/rotateTextView1&amp;quot;
        android:text=&amp;quot;原地不动，旋转45°&amp;quot; /&amp;gt;

    &amp;lt;TextView
        android:id=&amp;quot;@+id/textView3&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_alignTop=&amp;quot;@+id/rotateTextView3&amp;quot;
        android:layout_marginTop=&amp;quot;15dp&amp;quot;
        android:layout_toRightOf=&amp;quot;@+id/rotateTextView3&amp;quot;
        android:text=&amp;quot;x轴y轴偏移50%，旋转135°&amp;quot; /&amp;gt;

    &amp;lt;com.example.rtv.RotateTextView
        android:id=&amp;quot;@+id/RotateTextView01&amp;quot;
        android:layout_width=&amp;quot;100dp&amp;quot;
        android:layout_height=&amp;quot;100dp&amp;quot;
        android:layout_alignParentLeft=&amp;quot;true&amp;quot;
        android:layout_alignParentTop=&amp;quot;true&amp;quot;
        android:text=&amp;quot;@string/hello_world&amp;quot;
        /&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140508140815625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/5/8 14:10:00 [原文链接](http://blog.csdn.net/kennethyo/article/details/25293187)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：929 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/25293187#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;在一些设计上，设计师会要求我们的文字以45度显示，或者135度显示（如下图“抽奖”），可是android本身并没有提供TextView在布局文件中实现旋转的标签，这时候就需要我们去自定义TextView，并且重写onDraw（）方法实现效果。&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]博主毕业以来总结的android经验，想起来什么就加点</title>
    <link href="http://yoursite.com/2014/04/23/%E5%8E%9F-%E5%8D%9A%E4%B8%BB%E6%AF%95%E4%B8%9A%E4%BB%A5%E6%9D%A5%E6%80%BB%E7%BB%93%E7%9A%84android%E7%BB%8F%E9%AA%8C%EF%BC%8C%E6%83%B3%E8%B5%B7%E6%9D%A5%E4%BB%80%E4%B9%88%E5%B0%B1%E5%8A%A0%E7%82%B9/"/>
    <id>http://yoursite.com/2014/04/23/原-博主毕业以来总结的android经验，想起来什么就加点/</id>
    <published>2014-04-23T05:41:35.000Z</published>
    <updated>2016-06-08T06:45:41.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;span style=&quot;orphans:2; widows:2&quot;&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 id=&quot;1，api10以下尽量用padding-margin很多的时候会有bug，显示不出效果&quot;&gt;&lt;a href=&quot;#1，api10以下尽量用padding-margin很多的时候会有bug，显示不出效果&quot; class=&quot;headerlink&quot; title=&quot;1，api10以下尽量用padding,margin很多的时候会有bug，显示不出效果&quot;&gt;&lt;/a&gt;&lt;span style=&quot;font-size:18px&quot;&gt;1，&lt;/span&gt;&lt;span style=&quot;font-size:14px; font-family:Tahoma&quot;&gt;api10以下尽量用padding,margin很多的时候会有bug，显示不出效果&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;span style=&quot;font-size:14px; font-family:Tahoma&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;

&lt;h2 id=&quot;2，混淆，最好不要混淆实体类，用到反射的时候会报错&quot;&gt;&lt;a href=&quot;#2，混淆，最好不要混淆实体类，用到反射的时候会报错&quot; class=&quot;headerlink&quot; title=&quot;2，混淆，最好不要混淆实体类，用到反射的时候会报错&quot;&gt;&lt;/a&gt;2，&lt;span style=&quot;font-family:Tahoma; font-size:14px&quot;&gt;混淆，最好不要混淆实体类，用到反射的时候会报错&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;span style=&quot;font-family:Tahoma; font-size:14px; orphans:2; widows:2&quot;&gt;&lt;/span&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_1_3464846&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;-keep public class com.bocop.commons.bean.&lt;strong&gt;&lt;br&gt;-keepclasseswithmembers class com.bocop.commons.bean.&lt;/strong&gt; {&lt;br&gt;    *;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;

&lt;h2 id=&quot;3，非常好用的收键盘方式，适用fragment&quot;&gt;&lt;a href=&quot;#3，非常好用的收键盘方式，适用fragment&quot; class=&quot;headerlink&quot; title=&quot;3，非常好用的收键盘方式，适用fragment&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;3，非常好用的收键盘方式，适用fragment&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;&lt;/span&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_2_160987&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);&lt;/pre&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;收键盘代码&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;&lt;/span&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_3_2047577&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;if (getActivity().getWindow().getAttributes().softInputMode == WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) {&lt;br&gt;    if (getActivity().getCurrentFocus() != null)&lt;br&gt;        imm.hideSoftInputFromWindow(getActivity().getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);&lt;br&gt;}&lt;/pre&gt;&lt;br&gt;&lt;br&gt;## 4，EditText不获取焦点不获取光标的方法&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;在EditText的包裹空间加入2个属性即可&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_4_3618523&quot; name=&quot;code&quot; class=&quot;html&quot;&gt; &amp;lt;LinearLayout&lt;br&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;br&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;br&gt;        android:focusable=&amp;quot;true&amp;quot;&lt;br&gt;        android:focusableInTouchMode=&amp;quot;true&amp;quot;&lt;br&gt;        android:orientation=&amp;quot;vertical&amp;quot; &amp;gt;&lt;br&gt;    &amp;lt;EditText&lt;br&gt;            android:id=&amp;quot;@+id/et_phone&amp;quot;&lt;br&gt;            style=&amp;quot;@style/text_black_default_bg&amp;quot;&lt;br&gt;            android:layout_width=&amp;quot;match_parent&amp;quot;&lt;br&gt;            android:inputType=&amp;quot;phone&amp;quot; /&amp;gt;&lt;br&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;## 5，如何实现在Tabhost中的activity overridePendingTransition()切换效果&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_5_4633062&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;public class AnimCommon {//维护页面切换效果工具类&lt;br&gt;&lt;br&gt;    public static int in = 0;&lt;br&gt;&lt;br&gt;    public static int out = 0;&lt;br&gt;&lt;br&gt;    public static void set(int a, int b){&lt;br&gt;        in = a ;&lt;br&gt;        out = b;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    public static void clear(){&lt;br&gt;        in = 0;&lt;br&gt;        out = 0;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;br&gt;&lt;br&gt;在tabhost的onPause周期实现&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_6_1154479&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;public void onPause() {&lt;br&gt;&lt;br&gt;    super.overridePendingTransition(AnimCommon.in, AnimCommon.out);&lt;br&gt;    AnimCommon.clear();&lt;br&gt;&lt;br&gt;    super.onPause();&lt;br&gt;&lt;br&gt;}&lt;/pre&gt;&lt;br&gt;&lt;br&gt;在activity中startActivity或者finish的实现&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140423_7_8580967&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;Intent intent= new Intent(this, *.class);&lt;br&gt;AnimCommon.set(R.anim.push_left_in, R.anim.push_left_out);&lt;br&gt;this.startActivity(intent);&lt;/pre&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板&quot;&gt;&lt;a href=&quot;#6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板&quot; class=&quot;headerlink&quot; title=&quot;6，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板&quot;&gt;&lt;/a&gt;6，&lt;span style=&quot;color:rgb(51,51,51); font-family:Arial; font-size:14px; line-height:26px&quot;&gt;视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject：Object-obj-parent-getAdapter-getItem-position-先判空，再强转为需要的对象。这样就可以避免手动在onItemClick中（positon-header数量）了。转自马天宇大神。&quot;&gt;&lt;a href=&quot;#7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject：Object-obj-parent-getAdapter-getItem-position-先判空，再强转为需要的对象。这样就可以避免手动在onItemClick中（positon-header数量）了。转自马天宇大神。&quot; class=&quot;headerlink&quot; title=&quot;7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject：Object obj = parent.getAdapter().getItem(position); 先判空，再强转为需要的对象。这样就可以避免手动在onItemClick中（positon-header数量）了。转自马天宇大神。&quot;&gt;&lt;/a&gt;7，当listview含有Header时，在onItemClick事件中请这样获取ItemObject：Object obj = parent.getAdapter().getItem(position); 先判空，再强转为需要的对象。这样就可以避免手动在onItemClick中（positon-header数量）了。转自马天宇大神。&lt;/h3&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心-30524-。&quot;&gt;&lt;a href=&quot;#8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心-30524-。&quot; class=&quot;headerlink&quot; title=&quot;8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心&amp;#30524;。&quot;&gt;&lt;/a&gt;8，在做自定义view的时候，避免不了各种画图，画图就会用到各种对float的运算，这里做运算的时候要长个心&amp;#30524;。&lt;/h3&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;9，主动关闭Alert-Dialog-builder，可以借助builder-create-，返回的对象为AlertDialog。&quot;&gt;&lt;a href=&quot;#9，主动关闭Alert-Dialog-builder，可以借助builder-create-，返回的对象为AlertDialog。&quot; class=&quot;headerlink&quot; title=&quot;9，主动关闭Alert.Dialog.builder，可以借助builder.create()，返回的对象为AlertDialog。&quot;&gt;&lt;/a&gt;9，主动关闭Alert.Dialog.builder，可以借助builder.create()，返回的对象为AlertDialog。&lt;/h3&gt;&lt;div&gt;这里还要说一下，builder本身是没有dismiss()和cancel()方法的&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140522_8_5518462&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);&lt;br&gt;        alertDialog.setView(upload_menu);&lt;br&gt;        alert = alertDialog.create();&lt;br&gt;        alert.show();&lt;br&gt;&lt;br&gt;        alert.dismiss();&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;###&lt;/p&gt;
&lt;h3 id=&quot;10，BitmapFactory-decodeStream-InputStream-is-Rect-outPadding-Options&quot;&gt;&lt;a href=&quot;#10，BitmapFactory-decodeStream-InputStream-is-Rect-outPadding-Options&quot; class=&quot;headerlink&quot; title=&quot;10，BitmapFactory.decodeStream(InputStream is,Rect outPadding,Options&quot;&gt;&lt;/a&gt;10，&lt;a href=&quot;&quot;&gt;BitmapFactory&lt;/a&gt;.decodeStream(&lt;a href=&quot;&quot;&gt;InputStream&lt;/a&gt; is,&lt;a href=&quot;&quot;&gt;Rect&lt;/a&gt; outPadding,&lt;a href=&quot;&quot;&gt;Options&lt;/a&gt;&lt;/h3&gt;&lt;p&gt; opts) 返回null的问题&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-family:SimSun; font-weight:normal&quot;&gt;很多人会遇到这样的情况，通过上面的方法返回null的问题，如下代码&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140527_9_2856981&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;BitmapFactory.Options options = new BitmapFactory.Options();&lt;br&gt;        options.inJustDecodeBounds = true;&lt;br&gt;        InputStream openInputStream = null;&lt;br&gt;        try {&lt;br&gt;            openInputStream = getContentResolver().openInputStream(mPicUri);&lt;br&gt;            Bitmap bm = BitmapFactory.decodeStream(&lt;br&gt;                    openInputStream, null,&lt;br&gt;                    options);&lt;br&gt;            options.inJustDecodeBounds = false;&lt;br&gt;            int be = (int) (options.outHeight / (float) 200);&lt;br&gt;            if (be &amp;lt;= 0)&lt;br&gt;                be = 1;&lt;br&gt;            options.inSampleSize = be;&lt;br&gt;            openInputStream = getContentResolver().openInputStream(mPicUri);&lt;br&gt;            bm = BitmapFactory.decodeStream(openInputStream, null,&lt;br&gt;                    options);&lt;br&gt;            Matrix matrix = new Matrix();&lt;br&gt;            mPicBitamp = Bitmap.createBitmap(bm, 0, 0, bm.getWidth() - 10,&lt;br&gt;                    bm.getHeight() - 10, matrix, true);&lt;br&gt;            bm.recycle();&lt;br&gt;            showPic(mPicBitamp);&lt;br&gt;&lt;br&gt;        } catch (FileNotFoundException e) {&lt;br&gt;            e.printStackTrace();&lt;br&gt;        }finally{&lt;br&gt;            if(null!=openInputStream){&lt;br&gt;                try {&lt;br&gt;                    openInputStream.close();&lt;br&gt;                    openInputStream=null;&lt;br&gt;                } catch (IOException e) {&lt;br&gt;                    e.printStackTrace();&lt;br&gt;                }&lt;br&gt;            }&lt;br&gt;        }&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;font-weight:normal&quot;&gt;这是因为我们在两个Bitmap.decodeStream()方法中用了同一支流进行了处理，这里需要我们分别给两只不同的流，如下代码达到效果&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;font-weight:normal&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140527_10_3587329&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;        BitmapFactory.Options options = new BitmapFactory.Options();&lt;br&gt;        options.inJustDecodeBounds = true;&lt;br&gt;        InputStream openInputStream1 = null;&lt;br&gt;        InputStream openInputStream2 = null;&lt;br&gt;        try {&lt;br&gt;            openInputStream1 = getContentResolver().openInputStream(mPicUri);&lt;br&gt;            Bitmap bm = BitmapFactory.decodeStream(&lt;br&gt;                    openInputStream1, null,&lt;br&gt;                    options);&lt;br&gt;            options.inJustDecodeBounds = false;&lt;br&gt;            int be = (int) (options.outHeight / (float) 200);&lt;br&gt;            if (be &amp;lt;= 0)&lt;br&gt;                be = 1;&lt;br&gt;            options.inSampleSize = be;&lt;br&gt;&lt;br&gt;            openInputStream2 = getContentResolver().openInputStream(mPicUri);&lt;br&gt;&lt;br&gt;            bm = BitmapFactory.decodeStream(openInputStream2, null,&lt;br&gt;                    options);&lt;br&gt;            Matrix matrix = new Matrix();&lt;br&gt;            mPicBitamp = Bitmap.createBitmap(bm, 0, 0, bm.getWidth() - 10,&lt;br&gt;                    bm.getHeight() - 10, matrix, true);&lt;br&gt;            bm.recycle();&lt;br&gt;            showPic(mPicBitamp);&lt;br&gt;&lt;br&gt;        } catch (FileNotFoundException e) {&lt;br&gt;            e.printStackTrace();&lt;br&gt;        }finally{&lt;br&gt;            closeInputStream(openInputStream1);&lt;br&gt;            closeInputStream(openInputStream2);&lt;br&gt;        }&lt;/pre&gt;&lt;br&gt;&lt;br&gt;## 11，启动三星系统相机导致打开相机的Activity，会被destroy，导致nullpointexception。&lt;br&gt;&lt;br&gt;&lt;div&gt;发生这个问题可能大家已经分析到了，三星相机会根据用户横持或竖持设备进行旋转，这样就会导致我们开启系统相机的Activity进行销毁重构。我的解决办法是在清单文件里注册android:configChanges=&amp;quot;keyboardHidden|orientation|screenSize&amp;quot;，如下：&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140611_11_9184627&quot; name=&quot;code&quot; class=&quot;html&quot;&gt; &amp;lt;activity&lt;br&gt;            android:name=&amp;quot;.view.WantQuestionsActivity&amp;quot;&lt;br&gt;            android:screenOrientation=&amp;quot;portrait&amp;quot;&lt;br&gt;            android:configChanges=&amp;quot;keyboardHidden|orientation|screenSize&amp;quot;&lt;br&gt;            android:windowSoftInputMode=&amp;quot;adjustResize&amp;quot; &amp;gt;&lt;br&gt;                &amp;lt;/activity&amp;gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;并且在开启的Activity代码中重写&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20140611_12_1027791&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;    @Override&lt;br&gt;    public void onConfigurationChanged(Configuration newConfig) {&lt;br&gt;        Configuration configuration =new Configuration(newConfig);&lt;br&gt;        configuration.orientation =Configuration.ORIENTATION_PORTRAIT;&lt;br&gt;        newConfig.setTo(configuration);&lt;br&gt;        super.onConfigurationChanged(newConfig);&lt;br&gt;    }&lt;/pre&gt;其时到这里还会有一个问题就是照片旋转了，这里就不贴代码了，相信大家旋转照片网上能搜索一大把的。&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。&quot;&gt;&lt;a href=&quot;#12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。&quot; class=&quot;headerlink&quot; title=&quot;12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。&quot;&gt;&lt;/a&gt;12，listview有一个setEmptyView的方法，当adapter等于null或者item等0的时候会显示你设置的布局。&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;div&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;## &lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;13，&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;验证是否有合适的activity会响应这个intent，需要执行&lt;/span&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivities(android.content.Intent, int&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;queryIntentActivities()&lt;/a&gt;)&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;&amp;nbsp;来获取到能够接收这个intent的所有activity的list。如果返回的&lt;/span&gt;&lt;a href=&quot;http://developer.android.com/reference/java/util/List.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;List&lt;/a&gt;&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;非空，那么你才可以安全的使用这个intent。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color:rgb(1,1,1)&quot;&gt;&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;pre code_snippet_id=&quot;307936&quot; snippet_file_name=&quot;blog_20141028_13_3969097&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;PackageManager packageManager = getPackageManager();&lt;br&gt;List&amp;lt;ResolveInfo&amp;gt; activities = packageManager.queryIntentActivities(intent, 0);&lt;br&gt;boolean isIntentSafe = activities.size() &amp;gt; 0;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;如果&lt;/span&gt;&lt;code&gt;isIntentSafe&lt;/code&gt;&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;是&lt;/span&gt;&lt;code&gt;true&lt;/code&gt;&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;,&lt;br&gt; 那么至少有一个app可以响应这个intent。如果是&lt;/span&gt;&lt;code&gt;false&lt;/code&gt;&lt;span style=&quot;font-family:&#39;Open Sans&#39;,&#39;Clear Sans&#39;,&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:16px; letter-spacing:0.119999997317791px; line-height:25.6000003814697px&quot;&gt;则说明没有app可以handle这个intent。&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/4/23 13:41:35 [原文链接](http://blog.csdn.net/kennethyo/article/details/18408801)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：679 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/18408801#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;span style=&quot;orphans:2; widows:2&quot;&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2 id=&quot;1，api10以下尽量用padding-margin很多的时候会
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[原]用Fragment来代替过期的Tabhost和ActivityGroup</title>
    <link href="http://yoursite.com/2014/02/11/%E5%8E%9F-%E7%94%A8Fragment%E6%9D%A5%E4%BB%A3%E6%9B%BF%E8%BF%87%E6%9C%9F%E7%9A%84Tabhost%E5%92%8CActivityGroup/"/>
    <id>http://yoursite.com/2014/02/11/原-用Fragment来代替过期的Tabhost和ActivityGroup/</id>
    <published>2014-02-11T05:24:14.000Z</published>
    <updated>2016-06-08T06:45:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;我去年9月份做的一个项目中，主界面也是选项卡这种效果，搭建项目的另一位工程师仍然使用的是Tabhost。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;最近想起这件事来，便有了这篇博客。（Tabhost和ActivityGroup分别在api 13 和 14 中标记为过期）&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;本篇博客主要介绍如何用Fragment实现Tabhost效果。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;下图红色部分是RelativeLayout，用来实现Fragment的容器；绿色部分为RadioGroup。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140211130538312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQva2VubmV0aHlv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;首先&lt;/span&gt;布局xml中加入一个RelativeLayout来作为Fragment的容器，相当于Tabhost中的tabcontent；加入RadioGroup来作为选项卡，相当于Tabhost中的TabWidget。具体如下：&lt;/p&gt;
&lt;pre code_snippet_id=&quot;183528&quot; snippet_file_name=&quot;blog_20140211_1_4349355&quot; name=&quot;code&quot; class=&quot;html&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    tools:context=&amp;quot;.MainActivity&amp;quot; &amp;gt;

    &amp;lt;!-- 相当于TabWidget --&amp;gt;

    &amp;lt;RadioGroup
        android:id=&amp;quot;@+id/radioGroup1&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_alignParentBottom=&amp;quot;true&amp;quot;
        android:layout_alignParentLeft=&amp;quot;true&amp;quot;
        android:layout_alignParentRight=&amp;quot;true&amp;quot;
        android:orientation=&amp;quot;horizontal&amp;quot; &amp;gt;

        &amp;lt;RadioButton
            android:id=&amp;quot;@+id/radio0&amp;quot;
            android:layout_width=&amp;quot;0dp&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:layout_weight=&amp;quot;1&amp;quot;
            android:checked=&amp;quot;true&amp;quot;
            android:text=&amp;quot;一&amp;quot; /&amp;gt;

        &amp;lt;RadioButton
            android:id=&amp;quot;@+id/radio1&amp;quot;
            android:layout_width=&amp;quot;0dp&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:layout_weight=&amp;quot;1&amp;quot;
            android:text=&amp;quot;二&amp;quot; /&amp;gt;

        &amp;lt;RadioButton
            android:id=&amp;quot;@+id/radio2&amp;quot;
            android:layout_width=&amp;quot;0dp&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:layout_weight=&amp;quot;1&amp;quot;
            android:text=&amp;quot;三&amp;quot; /&amp;gt;
    &amp;lt;/RadioGroup&amp;gt;
    &amp;lt;!-- 相当于tabcontent --&amp;gt;

    &amp;lt;RelativeLayout
        android:id=&amp;quot;@+id/content&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot;
        android:layout_above=&amp;quot;@+id/radioGroup1&amp;quot;
        android:layout_alignParentLeft=&amp;quot;true&amp;quot;
        android:layout_alignParentTop=&amp;quot;true&amp;quot; &amp;gt;
    &amp;lt;/RelativeLayout&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;其次，在当前Activity中加入默认Fragment，并且通过RadioGroup的监听来进行切换Fragment。具体Activity代码如下：&lt;/p&gt;
&lt;pre code_snippet_id=&quot;183528&quot; snippet_file_name=&quot;blog_20140211_2_5156150&quot; name=&quot;code&quot; class=&quot;java&quot;&gt;package com.kenneth.blogtabfragment;

import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Context;
import android.os.Bundle;
import android.view.Menu;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;

/**
 * @author Kenneth 2014-2-11 上午10:26:06
 */
public class MainActivity extends Activity implements OnCheckedChangeListener {
    public static final String TAG = MainActivity.class.getSimpleName();
    private Context mContext = this;
    private FragmentManager fm;
    private RadioGroup radioGroup1;
    private RadioButton radio0;
    private RadioButton radio1;
    private RadioButton radio2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initData();
        initListener();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    private void initView() {
        radioGroup1 = (RadioGroup) findViewById(R.id.radioGroup1);
        radio0 = (RadioButton) findViewById(R.id.radio0);
        radio1 = (RadioButton) findViewById(R.id.radio1);
        radio2 = (RadioButton) findViewById(R.id.radio2);
    }

    private void initData() {
        fm = getFragmentManager();// 获取fragment管理工具类
        replace(new FirstFragment());//默认选第一个
    }

    private void initListener() {
        radioGroup1.setOnCheckedChangeListener(this);
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        switch (checkedId) {
        case R.id.radio0:
            replace(new FirstFragment());
            break;
        case R.id.radio1:
            replace(new SecondFragment());

            break;
        case R.id.radio2:
            replace(new ThirdFragment());

            break;

        default:
            break;
        }
    }

    private void replace(Fragment fragment) {//替换当前容器中的Fragment
        FragmentTransaction beginTransaction = fm.beginTransaction();
        beginTransaction.replace(R.id.content, fragment);
        beginTransaction.commit();
    }
}
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;以上，就是用Fragment来实现Tabhost效果的主要代码。如果是api11以下，请把getFragmentManager替换为getSupportFragmentManager,其他Fragment相关的请引v4支持包中的。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;用多了你就会发现Fragment要比Tabhost，ActivityGroup好用太多了。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;a href=&quot;http://download.csdn.net/download/zh08070005/6912303&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的工程包地址。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/2/11 13:24:14 [原文链接](http://blog.csdn.net/kennethyo/article/details/19074255)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：1340 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/19074255#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;我去年9月份做的一个项目中，主界面也是选项卡这种效果，搭建项目的另一位工程师仍然使用的是Tabhost。&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;最近想
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>[转]Google Java编程风格指南</title>
    <link href="http://yoursite.com/2014/02/10/%E8%BD%AC-Google-Java%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2014/02/10/转-Google-Java编程风格指南/</id>
    <published>2014-02-10T03:51:27.000Z</published>
    <updated>2016-06-08T06:45:18.000Z</updated>
    
    <content type="html">&lt;div style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:23px&quot;&gt;&lt;br&gt;作者：Hawstein&lt;br&gt;&lt;br&gt;出处：&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hawstein.com/posts/google-java-style.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;声明：本文采用以下协议进行授权：&amp;nbsp;&lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0&lt;/a&gt;&amp;nbsp;，转载请注明作者及出处。&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;##&lt;br&gt;目录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#Intro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#SFBasic&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源文件基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#SFStruct&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源文件结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#Format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&amp;#26684;式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#Naming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;命名约定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#Practice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编程实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#Javadoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hawstein.com/posts/google-java-style.html#End&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;后记&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;Intro&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;前言&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这份文档是Google Java编程风&amp;#26684;规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风&amp;#26684;。&lt;/p&gt;
&lt;p&gt;与其它的编程风&amp;#26684;指南一样，这里所讨论的不仅仅是编码&amp;#26684;式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;1.1 术语说明&lt;/p&gt;
&lt;p&gt;在本文档中，除非另有说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;术语class可表示一个普通类，枚举类，接口或是annotation类型(&lt;code&gt;@interface&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他的术语说明会偶尔在后面的文档出现。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;1.2 指南说明&lt;/p&gt;
&lt;p&gt;本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风&amp;#26684;，但并不意味着这是展现这些代码的唯一方式。 示例中的&amp;#26684;式选择不应该被强制定为规则。&lt;/p&gt;
&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;SFBasic&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;源文件基础&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;2.1 文件名&lt;/p&gt;
&lt;p&gt;源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为&lt;code&gt;.java&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;2.2 文件编码：UTF-8&lt;/p&gt;
&lt;p&gt;源文件编码&amp;#26684;式为UTF-8。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;2.3 特殊字符&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;2.3.1 空白字符&lt;/p&gt;
&lt;p&gt;除了行结束符序列，ASCII水平空&amp;#26684;字符(0x20，即空&amp;#26684;)是源文件中唯一允许出现的空白字符，这意味着：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有其它字符串中的空白字符都要进行转义。&lt;/li&gt;
&lt;li&gt;制表符不用于缩进。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;####&lt;br&gt;2.3.2 特殊转义序列&lt;/p&gt;
&lt;p&gt;对于具有特殊&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;转义序列&lt;/a&gt;的任何字符(\b, \t, \n, \f, \r, \“, \‘及)，我们使用它的转义序列，而不是相应的八进制(比如&lt;code&gt;\012&lt;/code&gt;)或Unicode(比如&lt;code&gt;\u000a&lt;/code&gt;)转义。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;2.3.3 非ASCII字符&lt;/p&gt;
&lt;p&gt;对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String unitAbbrev = &amp;amp;quot;μs&amp;amp;quot;;                                 | 赞，即使没有注释也非常清晰
String unitAbbrev = &amp;amp;quot;\u03bcs&amp;amp;quot;; // &amp;amp;quot;μs&amp;amp;quot;                    | 允许，但没有理由要这样做
String unitAbbrev = &amp;amp;quot;\u03bcs&amp;amp;quot;; // Greek letter mu, &amp;amp;quot;s&amp;amp;quot;    | 允许，但这样做显得笨拙还容易出错
String unitAbbrev = &amp;amp;quot;\u03bcs&amp;amp;quot;;                            | 很糟，读者根本看不出这是什么
return &amp;apos;\ufeff&amp;apos; &amp;amp;#43; content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释
`&amp;lt;/pre&amp;gt;
&amp;gt; &amp;gt; Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)

##
&amp;lt;a target=&amp;quot;_blank&amp;quot; id=&amp;quot;SFStruct&amp;quot; style=&amp;quot;color:rgb(0,136,204)&amp;quot;&amp;gt;源文件结构&amp;lt;/a&amp;gt;

一个源文件包含(按顺序地)：
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;许可证或版权信息(如有需要)&lt;/li&gt;
&lt;li&gt;package语句&lt;/li&gt;
&lt;li&gt;import语句&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个顶级类(&lt;strong&gt;只有一个&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;以上每个部分之间用一个空行隔开。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;3.1 许可证或版权信息&lt;/p&gt;
&lt;p&gt;如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;3.2 package语句&lt;/p&gt;
&lt;p&gt;package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;3.3 import语句&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;3.3.1 import不要使用通配符&lt;/p&gt;
&lt;p&gt;即，不要出现类&amp;#20284;这样的import语句：&lt;code&gt;import java.util.*;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;3.3.2 不要换行&lt;/p&gt;
&lt;p&gt;import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;3.3.3 顺序和间距&lt;/p&gt;
&lt;p&gt;import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的静态导入独立成组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.google&lt;/code&gt;&amp;nbsp;imports(仅当这个源文件是在&lt;code&gt;com.google&lt;/code&gt;包下)&lt;/li&gt;
&lt;li&gt;第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java&lt;/code&gt;&amp;nbsp;imports&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;javax&lt;/code&gt;&amp;nbsp;imports&lt;/p&gt;
&lt;p&gt;组内不空行，按字典序排列。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;3.4 类声明&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;3.4.1 只有一个顶级类声明&lt;/p&gt;
&lt;p&gt;每个顶级类都在一个与它同名的源文件中(当然，还包含&lt;code&gt;.java&lt;/code&gt;后缀)。&lt;/p&gt;
&lt;p&gt;例外：&lt;code&gt;package-info.java&lt;/code&gt;，该文件中可没有&lt;code&gt;package-info&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;3.4.2 类成员顺序&lt;/p&gt;
&lt;p&gt;类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;3.4.2.1 重载：永不分离&lt;/p&gt;
&lt;p&gt;当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。&lt;/p&gt;
&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;Format&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;&amp;#26684;式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始&amp;#20540;可被选择性地视为块状结构(4.8.3.1节)。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;4.1 大括号&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.1.1 使用大括号(即使是可选的)&lt;/p&gt;
&lt;p&gt;大括号与&lt;code&gt;if, else, for, do, while&lt;/code&gt;语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.1.2 非空块：K &amp;amp; R 风&amp;#26684;&lt;/p&gt;
&lt;p&gt;对于非空块和块状结构，大括号遵循Kernighan和Ritchie风&amp;#26684; (&lt;a href=&quot;http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Egyptian brackets&lt;/a&gt;):&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;左大括号前不换行&lt;/li&gt;
&lt;li&gt;左大括号后换行&lt;/li&gt;
&lt;li&gt;右大括号前换行&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nf&amp;quot; style=&amp;quot;color:rgb(0,170,0)&amp;quot;&amp;gt;MyClass&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;()&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;nd&amp;quot; style=&amp;quot;color:rgb(136,136,136)&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;method&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;()&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;condition&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;())&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
      &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;try&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;something&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt;
      &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;catch&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ProblemException&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;e&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
        &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;recover&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt;
      &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;};&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;4.8.1节给出了enum类的一些例外。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.1.3 空块：可以用简洁版本&lt;/p&gt;
&lt;p&gt;一个空的块状结构里什么也不包含，大括号可以简洁地写成&lt;code&gt;{}&lt;/code&gt;，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或&lt;br&gt; try/catch/finally) ，即使大括号内没内容，右大括号也要换行。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nf&amp;quot; style=&amp;quot;color:rgb(0,170,0)&amp;quot;&amp;gt;doNothing&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;()&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;###&lt;br&gt;4.2 块缩进：2个空&amp;#26684;&lt;/p&gt;
&lt;p&gt;每当开始一个新的块，缩进增加2个空&amp;#26684;，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;4.3 一行一个语句&lt;/p&gt;
&lt;p&gt;每个语句后要换行。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;4.4 列限制：80或100&lt;/p&gt;
&lt;p&gt;一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。&lt;/p&gt;
&lt;p&gt;例外：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;语句(见3.2节和3.3节)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注释中那些可能被剪切并粘贴到shell中的命令行。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;4.5 自动换行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。&lt;/p&gt;
&lt;p&gt;我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;####&lt;br&gt;4.5.1 从哪里断开&lt;/p&gt;
&lt;p&gt;自动换行的基本准则是：更倾向于在更高的语法级别处断开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果在&lt;code&gt;非赋&amp;amp;#20540;运算符&lt;/code&gt;处断开，那么在该符号前断开(比如&amp;#43;，它将位于下一行)。注意：这一点与Google其它语言的编程风&amp;#26684;不同(如C&amp;#43;&amp;#43;和JavaScript)。&lt;br&gt; 这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;amp;（&lt;code&gt;&amp;amp;lt;T extends Foo &amp;amp;amp; Bar&amp;amp;gt;&lt;/code&gt;)，catch块中的管道符号(&lt;code&gt;catch
 (FooException | BarException e&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果在&lt;code&gt;赋&amp;amp;#20540;运算符&lt;/code&gt;处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于&lt;code&gt;foreach&lt;/code&gt;语句中的分号。&lt;/li&gt;
&lt;li&gt;方法名或构造函数名与左括号留在同一行。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逗号(,)与其前面的内容留在同一行。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.5.2 自动换行时缩进至少&amp;#43;4个空&amp;#26684;&lt;/p&gt;
&lt;p&gt;自动换行时，第一行后的每一行至少比第一行多缩进4个空&amp;#26684;(注意：制表符不用于缩进。见2.3.1节)。&lt;/p&gt;
&lt;p&gt;当存在连续自动换行时，缩进可能会多缩进不只4个空&amp;#26684;(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。&lt;/p&gt;
&lt;p&gt;第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空&amp;#26684;来对齐前面行的符号。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;4.6 空白&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.6.1 垂直空白&lt;/p&gt;
&lt;p&gt;以下情况需要使用一个空行：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   **例外**：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;在函数体内，语句的逻辑分组间使用空行。&lt;/li&gt;
&lt;li&gt;类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要满足本文档中其他节的空行要求(比如3.3节：import语句)&lt;/p&gt;
&lt;p&gt;多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.6.2 水平空白&lt;/p&gt;
&lt;p&gt;除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空&amp;#26684;，单个ASCII空&amp;#26684;也出现在以下几个地方：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分隔任何保留字与紧随其后的左括号(&lt;code&gt;(&lt;/code&gt;)(如&lt;code&gt;if,
 for catch&lt;/code&gt;等)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;分隔任何保留字与其前面的右大括号(&lt;code&gt;}&lt;/code&gt;)(如&lt;code&gt;else,
 catch&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在任何左大括号前(&lt;code&gt;{&lt;/code&gt;)，两个例外：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   `@SomeAnnotation({a, b})`(不使用空&amp;amp;#26684;)。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String[][] x = foo;&lt;/code&gt;(大括号间没有空&amp;#26684;，见下面的Note)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   类型界限中的&amp;amp;amp;(`&amp;amp;lt;T extends Foo &amp;amp;amp; Bar&amp;amp;gt;`)。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;catch块中的管道符号(&lt;code&gt;catch (FooException | BarException e&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt;语句中的分号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;, : ;&lt;/code&gt;及右括号(&lt;code&gt;)&lt;/code&gt;)后&lt;/li&gt;
&lt;li&gt;如果在一条语句后做注释，则双斜杠(//)两边都要空&amp;#26684;。这里可以允许多个空&amp;#26684;，但没有必要。&lt;/li&gt;
&lt;li&gt;类型和变量之间：List&amp;nbsp;list。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组初始化中，大括号内的空&amp;#26684;是可选的，即&lt;code&gt;new int[] {5, 6}&lt;/code&gt;和&lt;code&gt;new
 int[] { 5, 6 }&lt;/code&gt;都是可以的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空&amp;#26684;，只对内部空&amp;#26684;做要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;####&lt;br&gt;4.6.3 水平对齐：不做要求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：水平对齐指的是通过增加可变数量的空&amp;#26684;来使某一行的字符与上一行的相应字符对齐。&lt;/p&gt;
&lt;p&gt;这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风&amp;#26684;对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风&amp;#26684;。&lt;/p&gt;
&lt;p&gt;以下示例先展示未对齐的代码，然后是对齐的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;x&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// this is fine&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Color&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;color&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// this too&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;   &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;x&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;      &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// permitted, but future edits&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Color&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;color&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;  &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// may leave it unaligned&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&amp;gt; &amp;gt; Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风&amp;#26684;)， 这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。&lt;br&gt;&lt;br&gt;###&lt;br&gt;4.7 用小括号来限定组：推荐&lt;br&gt;&lt;br&gt;除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。&lt;br&gt;&lt;br&gt;###&lt;br&gt;4.8 具体结构&lt;br&gt;&lt;br&gt;####&lt;br&gt;4.8.1 枚举类&lt;br&gt;&lt;br&gt;枚举常量间用逗号隔开，换行可选。&lt;br&gt;&lt;br&gt;没有方法和文档的枚举类可写成数组初始化的&amp;#26684;式：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;enum&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Suit&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;CLUBS&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;HEARTS&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;SPADES&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;DIAMONDS&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;由于枚举类也是一个类，因此所有适用于其它类的&amp;#26684;式规则也适用于枚举类。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.8.2 变量声明&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;4.8.2.1 每次只声明一个变量&lt;/p&gt;
&lt;p&gt;不要使用组合声明，比如&lt;code&gt;int a, b;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;4.8.2.2 需要时才声明，并尽快进行初始化&lt;/p&gt;
&lt;p&gt;不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.8.3 数组&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;4.8.3.1 数组初始化：可写成块状结构&lt;/p&gt;
&lt;p&gt;数组初始化可以写成块状结构，比如，下面的写法都是OK的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[]&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[]&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[]&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[]&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;#####&lt;br&gt;4.8.3.2 非C风&amp;#26684;的数组声明&lt;/p&gt;
&lt;p&gt;中括号是类型的一部分：&lt;code&gt;String[] args&lt;/code&gt;， 而非&lt;code&gt;String
 args[]&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.8.4 switch语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(&lt;code&gt;case
 FOO:&lt;/code&gt;或&lt;code&gt;default:&lt;/code&gt;)，后面跟着一条或多条语句。&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;4.8.4.1 缩进&lt;/p&gt;
&lt;p&gt;与其它块状结构一致，switch块中的内容缩进为2个空&amp;#26684;。&lt;/p&gt;
&lt;p&gt;每个switch标签后新起一行，再缩进2个空&amp;#26684;，写下一条或多条语句。&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;4.8.4.2 Fall-through：注释&lt;/p&gt;
&lt;p&gt;在一个switch块内，每个语句组要么通过&lt;code&gt;break, continue, return&lt;/code&gt;或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，&lt;br&gt; 任何能表达这个意思的注释都是OK的(典型的是用&lt;code&gt;// fall through&lt;/code&gt;)。这个特殊的注释并不需要在最后一个语句组(一般是&lt;code&gt;default&lt;/code&gt;)中出现。示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;switch&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;input&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;prepareOneOrTwo&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// fall through&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;case&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;handleOneTwoOrThree&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;break&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;default&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;:&amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;handleLargeNumber&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;input&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;#####&lt;br&gt;4.8.4.3 default的情况要写出来&lt;/p&gt;
&lt;p&gt;每个switch语句都包含一个&lt;code&gt;default&lt;/code&gt;语句组，即使它什么代码也不包含。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.8.5 注解(Annotations)&lt;/p&gt;
&lt;p&gt;注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;nd&amp;quot; style=&amp;quot;color:rgb(136,136,136)&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;nd&amp;quot; style=&amp;quot;color:rgb(136,136,136)&amp;quot;&amp;gt;@Nullable&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nf&amp;quot; style=&amp;quot;color:rgb(0,170,0)&amp;quot;&amp;gt;getNameIfPresent&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;()&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;...&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;例外&lt;/strong&gt;：单个的注解可以和签名的第一行出现在同一行。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;nd&amp;quot; style=&amp;quot;color:rgb(136,136,136)&amp;quot;&amp;gt;@Override&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;hashCode&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;()&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;...&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;nd&amp;quot; style=&amp;quot;color:rgb(136,136,136)&amp;quot;&amp;gt;@Partial&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nd&amp;quot; style=&amp;quot;color:rgb(136,136,136)&amp;quot;&amp;gt;@Mock&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;DataLoader&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;loader&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;参数和局部变量注解没有特定规则。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;4.8.6 注释&lt;/p&gt;
&lt;p&gt;#####&lt;br&gt;4.8.6.1 块注释风&amp;#26684;&lt;/p&gt;
&lt;p&gt;块注释与其周围的代码在同一缩进级别。它们可以是&lt;code&gt;/* ... */&lt;/code&gt;风&amp;#26684;，也可以是&lt;code&gt;//
 ...&lt;/code&gt;风&amp;#26684;。对于多行的&lt;code&gt;/* ... */&lt;/code&gt;注释，后续行必须从&lt;code&gt;*&lt;/code&gt;开始，&lt;br&gt; 并且与前一行的&lt;code&gt;*&lt;/code&gt;对齐。以下示例注释都是OK的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;/*&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt; * This is          // And so           /* Or you can&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt; * okay.            // is this.          * even do this. */&amp;lt;/span&amp;gt;
 &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;*/&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;注释不要封闭在由星号或其它字符绘制的框架里。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风&amp;#26684;一样)，那么使用&lt;code&gt;/* ... */&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;####&lt;br&gt;4.8.7 Modifiers&lt;/p&gt;
&lt;p&gt;类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;protected&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;private&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;abstract&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;transient&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;volatile&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;synchronized&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;native&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;strictfp&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;Naming&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;命名约定&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;5.1 对所有标识符都通用的规则&lt;/p&gt;
&lt;p&gt;标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式&lt;code&gt;\w&amp;amp;#43;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在Google其它编程语言风&amp;#26684;中使用的特殊前缀或后缀，如&lt;code&gt;name_&lt;/code&gt;,&amp;nbsp;&lt;code&gt;mName&lt;/code&gt;,&amp;nbsp;&lt;code&gt;s_name&lt;/code&gt;和&lt;code&gt;kName&lt;/code&gt;，在Java编程风&amp;#26684;中都不再使用。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;5.2 标识符类型的规则&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.1 包名&lt;/p&gt;
&lt;p&gt;包名全部小写，连续的单词只是简单地连接起来，不使用下划线。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.2 类名&lt;/p&gt;
&lt;p&gt;类名都以&lt;code&gt;UpperCamelCase&lt;/code&gt;风&amp;#26684;编写。&lt;/p&gt;
&lt;p&gt;类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。&lt;/p&gt;
&lt;p&gt;测试类的命名以它要测试的类的名称开始，以&lt;code&gt;Test&lt;/code&gt;结束。例如，&lt;code&gt;HashTest&lt;/code&gt;或&lt;code&gt;HashIntegrationTest&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.3 方法名&lt;/p&gt;
&lt;p&gt;方法名都以&lt;code&gt;lowerCamelCase&lt;/code&gt;风&amp;#26684;编写。&lt;/p&gt;
&lt;p&gt;方法名通常是动词或动词短语。&lt;/p&gt;
&lt;p&gt;下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：&lt;code&gt;test&amp;amp;lt;MethodUnderTest&amp;amp;gt;_&amp;amp;lt;state&amp;amp;gt;&lt;/code&gt;，例如&lt;code&gt;testPop_emptyStack&lt;/code&gt;。&lt;br&gt; 并不存在唯一正确的方式来命名测试方法。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.4 常量名&lt;/p&gt;
&lt;p&gt;常量名命名模式为&lt;code&gt;CONSTANT_CASE&lt;/code&gt;，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？&lt;/p&gt;
&lt;p&gt;每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不&lt;code&gt;打算&lt;/code&gt;改变对象一般是不够的，它要真的一直不变才能将它示为常量。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// Constants&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;NUMBER&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;mi&amp;quot; style=&amp;quot;color:rgb(0,153,153)&amp;quot;&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ImmutableList&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;NAMES&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ImmutableList&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;Ed&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;Ann&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Joiner&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;COMMA_JOINER&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Joiner&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;on&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;sc&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;#39;,&amp;#39;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;  &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// because Joiner is immutable&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;SomeMutableType&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[]&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;EMPTY_ARRAY&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{};&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;enum&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;SomeEnum&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ENUM_CONSTANT&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;

&amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// Not constants&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;nonFinal&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;non-final&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;nonStatic&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;non-static&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Set&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;mutableCollection&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;new&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;HashSet&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;gt;();&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ImmutableSet&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;SomeMutableType&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;mutableElements&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ImmutableSet&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;of&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;mutable&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Logger&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;logger&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Logger&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;getLogger&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;MyClass&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;getName&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;());&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;final&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;[]&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;nonEmptyArray&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;these&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;can&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;s&amp;quot; style=&amp;quot;color:rgb(170,85,0)&amp;quot;&amp;gt;&amp;amp;quot;change&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;};&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;这些名字通常是名词或名词短语。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.5 非常量字段名&lt;/p&gt;
&lt;p&gt;非常量字段名以&lt;code&gt;lowerCamelCase&lt;/code&gt;风&amp;#26684;编写。&lt;/p&gt;
&lt;p&gt;这些名字通常是名词或名词短语。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.6 参数名&lt;/p&gt;
&lt;p&gt;参数名以&lt;code&gt;lowerCamelCase&lt;/code&gt;风&amp;#26684;编写。&lt;/p&gt;
&lt;p&gt;参数应该避免用单个字符命名。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.7 局部变量名&lt;/p&gt;
&lt;p&gt;局部变量名以&lt;code&gt;lowerCamelCase&lt;/code&gt;风&amp;#26684;编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。&lt;/p&gt;
&lt;p&gt;虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。&lt;/p&gt;
&lt;p&gt;即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;5.2.8 类型变量名&lt;/p&gt;
&lt;p&gt;类型变量可用以下两种风&amp;#26684;之一进行命名：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;5.3 驼峰式命名法(CamelCase)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;驼峰式命名法&lt;/a&gt;分大驼峰式命名法(&lt;code&gt;UpperCamelCase&lt;/code&gt;)和小驼峰式命名法(&lt;code&gt;lowerCamelCase&lt;/code&gt;)。&lt;br&gt; 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如&amp;quot;IPv6&amp;quot;或&amp;quot;iOS&amp;quot;)。Google指定了以下的转换方案。&lt;/p&gt;
&lt;p&gt;名字从&lt;code&gt;散文形式&lt;/code&gt;(prose form)开始:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;把短语转换为纯ASCII码，并且移除任何单引号。例如：&amp;quot;Müller’s algorithm&amp;quot;将变成&amp;quot;Muellers algorithm&amp;quot;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把这个结果切分成单词，在空&amp;#26684;或其它标点符号(通常是连字符)处分割开。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如&amp;amp;quot;AdWords&amp;amp;quot;将分割成&amp;amp;quot;ad words&amp;amp;quot;)。 需要注意的是&amp;amp;quot;iOS&amp;amp;quot;并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   每个单词的第一个字母都大写，来得到大驼峰式命名。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后将所有的单词连接起来得到一个标识符。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;h2 id=&quot;Prose-form-Correct-Incorrect&quot;&gt;&lt;a href=&quot;#Prose-form-Correct-Incorrect&quot; class=&quot;headerlink&quot; title=&quot;`Prose form                Correct               Incorrect&quot;&gt;&lt;/a&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; color:rgb(51,51,51); margin-top:0px; margin-bottom:9px; line-height:18px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;`Prose form                Correct               Incorrect&lt;/pre&gt;&lt;/h2&gt;&lt;p&gt;&amp;quot;XML HTTP request&amp;quot;        XmlHttpRequest        XMLHTTPRequest&lt;br&gt;&amp;quot;new customer ID&amp;quot;         newCustomerId         newCustomerID&lt;br&gt;&amp;quot;inner stopwatch&amp;quot;         innerStopwatch        innerStopWatch&lt;br&gt;&amp;quot;supports IPv6 on iOS?&amp;quot;   supportsIpv6OnIos     supportsIPv6OnIOS&lt;br&gt;&amp;quot;YouTube importer&amp;quot;        YouTubeImporter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;YoutubeImporter*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;`&lt;/p&gt;
&lt;p&gt;加星号处表示可以，但不推荐。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note：在英语中，某些带有连字符的单词形式不唯一。例如：&amp;quot;nonempty&amp;quot;和&amp;quot;non-empty&amp;quot;都是正确的，因此方法名&lt;code&gt;checkNonempty&lt;/code&gt;和&lt;code&gt;checkNonEmpty&lt;/code&gt;也都是正确的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;Practice&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;编程实践&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;6.1 @Override：能用则用&lt;/p&gt;
&lt;p&gt;只要是合法的，就把&lt;code&gt;@Override&lt;/code&gt;注解给用上。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;6.2 捕获的异常：不能忽视&lt;/p&gt;
&lt;p&gt;除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个&lt;code&gt;AssertionError&lt;/code&gt;重新抛出。)&lt;/p&gt;
&lt;p&gt;如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;try&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;i&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Integer&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;parseInt&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;response&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nf&amp;quot; style=&amp;quot;color:rgb(0,170,0)&amp;quot;&amp;gt;handleNumericResponse&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;i&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;catch&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;NumberFormatException&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;ok&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// it&amp;#39;s not numeric; that&amp;#39;s fine, just continue&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nf&amp;quot; style=&amp;quot;color:rgb(0,170,0)&amp;quot;&amp;gt;handleTextResponse&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;response&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;);&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;例外&lt;/strong&gt;：在测试中，如果一个捕获的异常被命名为&lt;code&gt;expected&lt;/code&gt;，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，&lt;br&gt; 因此在这里就没有必要加注释。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;try&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;emptyStack&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;pop&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt;
  &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;fail&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;k&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;catch&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;NoSuchElementException&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;expected&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;###&lt;br&gt;6.3 静态成员：使用类进行调用&lt;/p&gt;
&lt;p&gt;使用类名调用静态的类成员，而不是具体某个对象或表达式。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Foo&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;aFoo&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;...;&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;Foo&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;aStaticMethod&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// good&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;aFoo&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;aStaticMethod&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// bad&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;somethingThatYieldsAFoo&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;().&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;na&amp;quot; style=&amp;quot;color:rgb(30,144,255)&amp;quot;&amp;gt;aStaticMethod&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;();&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;c1&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;// very bad&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;###&lt;br&gt;6.4 Finalizers: 禁用&lt;/p&gt;
&lt;p&gt;极少会去重载&lt;code&gt;Object.finalize&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解&lt;a href=&quot;http://books.google.com/books?isbn=8131726592&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Effective Java&lt;/a&gt;&amp;nbsp;第7条款：“Avoid Finalizers”，然后不要使用它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;Javadoc&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;Javadoc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;7.1 &amp;#26684;式&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;7.1.1 一般形式&lt;/p&gt;
&lt;p&gt;Javadoc块的基本&amp;#26684;式如下所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt;/**&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt; * Multiple lines of Javadoc text are written here,&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt; * wrapped normally...&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;cm&amp;quot; style=&amp;quot;color:rgb(76,131,23)&amp;quot;&amp;gt; */&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;kd&amp;quot; style=&amp;quot;color:rgb(0,0,170)&amp;quot;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;kt&amp;quot; style=&amp;quot;color:rgb(0,170,170)&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;nf&amp;quot; style=&amp;quot;color:rgb(0,170,0)&amp;quot;&amp;gt;method&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;String&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;n&amp;quot;&amp;gt;p1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;{&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;...&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;o&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;或者是以下单行形式：&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;highlight&quot; style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:18px&quot;&gt;&lt;br&gt;&lt;pre style=&quot;padding:8.5px; font-family:Menlo,Monaco,&#39;Courier New&#39;,monospace; font-size:12px; margin-top:0px; margin-bottom:9px; background-color:rgb(245,245,245); white-space:pre-wrap; word-break:break-all; word-wrap:break-word&quot;&gt;`&lt;span class=&quot;cm&quot; style=&quot;color:rgb(76,131,23)&quot;&gt;/&lt;em&gt;* An especially short bit of Javadoc. &lt;/em&gt;/&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;基本&amp;#26684;式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;7.1.2 段落&lt;/p&gt;
&lt;p&gt;空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签&lt;code&gt;&amp;amp;lt;p&amp;amp;gt;&lt;/code&gt;，并且它和第一个单词间没有空&amp;#26684;。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;7.1.3 Javadoc标记&lt;/p&gt;
&lt;p&gt;标准的Javadoc标记按以下顺序出现：&lt;code&gt;@param&lt;/code&gt;,&amp;nbsp;&lt;code&gt;@return&lt;/code&gt;,&amp;nbsp;&lt;code&gt;@throws&lt;/code&gt;,&amp;nbsp;&lt;code&gt;@deprecated&lt;/code&gt;,&lt;br&gt; 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空&amp;#26684;。&lt;/p&gt;
&lt;p&gt;###&lt;br&gt;7.2 摘要片段&lt;/p&gt;
&lt;p&gt;每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。&lt;/p&gt;
&lt;p&gt;这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以&lt;code&gt;A {@code Foo} is a...&lt;/code&gt;或&lt;code&gt;This
 method returns...&lt;/code&gt;开头, 它也不会是一个完整的祈使句，如&lt;code&gt;Save the record...&lt;/code&gt;。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：一个常见的错误是把简单的Javadoc写成&lt;code&gt;/** @return the customer ID */&lt;/code&gt;，这是不正确的。它应该写成`/**&lt;/p&gt;
&lt;p&gt; Returns the customer ID. */`。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;###&lt;br&gt;7.3 哪里需要使用Javadoc&lt;/p&gt;
&lt;p&gt;至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;7.3.1 例外：不言自明的方法&lt;/p&gt;
&lt;p&gt;对于简单明显的方法如&lt;code&gt;getFoo&lt;/code&gt;，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么&amp;#20540;得写了。&lt;/p&gt;
&lt;p&gt;单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名&lt;code&gt;getCanonicalName&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt; 就不应该忽视文档说明，因为读者很可能不知道词语&lt;code&gt;canonical name&lt;/code&gt;指的是什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;####&lt;br&gt;7.3.2 例外：重载&lt;/p&gt;
&lt;p&gt;如果一个方法重载了超类中的方法，那么Javadoc并非必需的。&lt;/p&gt;
&lt;p&gt;####&lt;br&gt;7.3.3 可选的Javadoc&lt;/p&gt;
&lt;p&gt;对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成Javadoc，这样更统一更友好。&lt;/p&gt;
&lt;p&gt;##&lt;br&gt;&lt;a target=&quot;_blank&quot; id=&quot;End&quot; style=&quot;color:rgb(0,136,204)&quot;&gt;后记&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文档翻译自&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javaguide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Java Style&lt;/a&gt;， 译者&lt;a href=&quot;http://weibo.com/hawstein&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Hawstein&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    作者：zh08070005 发表于2014/2/10 11:51:27 [原文链接](http://blog.csdn.net/kennethyo/article/details/19033951)
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
阅读：582 评论：0 [查看评论](http://blog.csdn.net/kennethyo/article/details/19033951#comments)
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;div style=&quot;color:rgb(51,51,51); font-family:&#39;Helvetica Neue&#39;,Helvetica,Arial,sans-serif; font-size:13px; line-height:23px&quot;&gt;&lt;br&gt;作者：Hawstein&lt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
